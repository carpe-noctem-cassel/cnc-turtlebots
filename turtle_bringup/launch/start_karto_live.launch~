<launch>

  <!-- launchfile specific setup -->
  <arg name="includes" default="$(find turtle_szenario1)/launch/includes" />
  <arg name="nodelet_manager_name" default="mobile_base_nodelet_manager" />
  <arg name="scan_topic_kinect" default="/scan_kinect" />
  <arg name="scan_topic_hokuyo" default="/scan_hokuyo" />

  <param name="use_sim_time" value="false" />

  <!-- setup the frames -->
  <param name="laser_frame" value="hokuyu_laser_link" /> <!--Kinect:  camera_depth_frame-->
  <param name="odometry_frame" value="odom" />
  <param name="offset_frame" value="offset" />
  <param name="map_frame" value="map" />
  <param name="robot_frame" value="base_footprint" />

  <!-- setup public topics -->
  <param name="map_topic" value="map" />
  <param name="laser_topic" value="scan" />

  <!-- setup public services -->
  <param name="map_service" value="static_map" />

  <!-- Start up the Nodelet Manager -->
  <include file="$(arg includes)/mobile_base.launch.xml" >
    <arg name="nodelet_manager_name" value="$(arg nodelet_manager_name)" />
  </include>

  <!-- setup robot_description -->
  <arg name="urdf_file" default="$(find xacro)/xacro.py '$(find turtle_szenario1)/descriptions/robots/kobuki_hexagons_kinect.urdf.xacro'" />
  <param name="robot_description" command="$(arg urdf_file)" />

  <!-- Start the Kobuki Base -->
  <include file="$(arg includes)/kobuki_node.launch.xml" >
    <arg name="nodelet_manager_name" value="$(arg nodelet_manager_name)" />
  </include>

  <!-- Start Openni and Kinect-Stuff -->
  <include file="$(arg includes)/openni.launch.xml" >
    <arg name="publish_tf" value="false" />
    <arg name="rgb_processing" value="true" />
    <arg name="ir_processing" value="true" />
    <arg name="depth_processing" value="true" />
    <arg name="depth_registered_processing" value="true"/>
    <arg name="disparity_processing" value="false"/>
    <arg name="disparity_registered_processing" value="false"/>
  </include>

  <!-- Start the Diagnostic Aggregator -->
  <include file="$(arg includes)/diagnostic_aggregator.launch.xml" />

  <!-- Start the Laserscanner (Fake node) -->
  <include file="$(arg includes)/depthimage_to_laserscan.launch.xml" >
    <arg name="nodelet_manager_name" value="$(arg nodelet_manager_name)" />
    <arg name="scan_topic_remap" value="$(arg scan_topic_kinect)" />
    <arg name="out_frame_id" value="camera_depth_frame" />
  </include>  

  <!-- Start up the Statepublisher for right tf building -->
  <include file="$(arg includes)/state_publisher.launch.xml" />

  <!-- Start Hokuyo Laser Node -->
  <node name="laser_driver" pkg="hokuyo_node" type="hokuyo_node">
    <param name="frame_id" value="hokuyu_laser_link" />
  </node>

<!-- Start up the move nodes -->

  <!-- Velocity Muxer -->
  <include file="$(arg includes)/cmd_vel_mux.launch.xml" />

  <!-- Safetycontroller -->
  <include file="$(arg includes)/safety_controller.launch.xml" />

  <!-- Velocity Smoother-->
  <include file="$(arg includes)/velocity_smoother.launch.xml" />

  <!-- nav2d stuff -->

  <!-- Start the Operator to control the simulated robot -->
  <node name="Operator" pkg="nav2d_operator" type="operator" >
    <remap from="scan" to="$(arg scan_topic_hokuyo)"/>
    <remap from="cmd_vel" to="cmd_vel_mux/navigation" />
    <rosparam file="$(find turtle_szenario1)/param/nav2d/operator.yaml"/>
    <rosparam file="$(find turtle_szenario1)/param/nav2d/costmap.yaml" ns="local_map" />
  </node>

  <!-- Start Mapper to genreate map from laser scans -->
  <node name="Mapper" pkg="nav2d_karto" type="mapper">
    <remap from="scan" to="$(arg scan_topic_hokuyo)"/>
    <rosparam file="$(find turtle_szenario1)/param/nav2d/mapper.yaml"/>
  </node>

  <!-- Start the Navigator to move the robot autonomously -->
  <node name="Navigator" pkg="nav2d_navigator" type="navigator">
    <rosparam file="$(find turtle_szenario1)/param/nav2d/navigator.yaml"/>
  </node>

  <node name="GetMap" pkg="nav2d_navigator" type="get_map_client" />
  <node name="Explore" pkg="nav2d_navigator" type="explore_client" />
  <node name="SetGoal" pkg="nav2d_navigator" type="set_goal_client" />

</launch>
