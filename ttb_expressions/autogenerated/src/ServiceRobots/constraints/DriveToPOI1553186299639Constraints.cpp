#include "ServiceRobots/constraints/DriveToPOI1553186299639Constraints.h"
/*PROTECTED REGION ID(ch1553186299639) ENABLED START*/
#include <TurtleBot.h>
#include <alica/reasoner/SimpleTerm.h>
#include <alica/reasoner/SimpleVariable.h>
#include <alica_solver_interface/SolverTerm.h>
#include <alica_solver_interface/SolverVariable.h>
#include <engine/RunningPlan.h>
#include <engine/constraintmodul/ProblemDescriptor.h>
#include <ttb/TTBWorldModel.h>
#include <ttb/wm/TaskManager.h>
/*PROTECTED REGION END*/

using namespace alica;

namespace alicaAutogenerated
{
// Plan:DriveToPOI
/*
 * Tasks:
 * - EP:1553246730787 : DefaultTask (1528875085489)
 *
 * States:
 * - DriveToPOI (1553246732403)
 * - OpenDoor (1553246733927)
 * - AtGoalPOI (1553246736188)
 * - WasBlocked (1553246738057)
 *
 * Vars:
 * - door (1553249844851)
 * - poi (1553249850610)
 */
/*
 * RuntimeCondition - (Name): 1553249831272
 * (ConditionString):
 * Static Variables: poi door
 * Domain Variables:
 *
 */
void Constraint1553249831272::getConstraint(std::shared_ptr<ProblemDescriptor> c, std::shared_ptr<RunningPlan> rp)
{
    /*PROTECTED REGION ID(cc1553249831272) ENABLED START*/
    auto wm = ttb::TTBWorldModel::get();
    auto currentTask = wm->taskManager.getNextTask();
    if (!currentTask || currentTask->getInformation().type != ttb_msgs::ServeTask::DRIVE_TO) {
        // current task is not for driving to an POI, so don't specify any problem descriptor
        auto constraint = new alica::reasoner::SimpleTerm();
        for (auto var : c->getStaticVars()) {
            auto SimpleVar = reinterpret_cast<alica::reasoner::SimpleVariable*>(var);
            if (SimpleVar) {
                constraint->setVariable(SimpleVar, alica::reasoner::SimpleVariable::NO_VALUE);
            }
        }
        c->setConstraint(constraint);
        return;
    }

    // POI Variable
    auto currentGoalPOI = wm->topologicalModel.getPOI(stoi(currentTask->getInformation().entity));
    if (!currentGoalPOI) {
        // unable to get the goalPOI
        auto constraint = new alica::reasoner::SimpleTerm();
        for (auto var : c->getStaticVars()) {
            auto SimpleVar = reinterpret_cast<alica::reasoner::SimpleVariable*>(var);
            if (SimpleVar) {
                constraint->setVariable(SimpleVar, alica::reasoner::SimpleVariable::NO_VALUE);
            }
        }
        c->setConstraint(constraint);
        return;
    }

    auto robot = ttb::TurtleBot::get(wm);
    auto nextPOI = robot->movement->getNextPOI(currentGoalPOI);
    if (!nextPOI) {
        // unable to get nextPOI
        auto constraint = new alica::reasoner::SimpleTerm();
        for (auto var : c->getStaticVars()) {
            auto SimpleVar = reinterpret_cast<alica::reasoner::SimpleVariable*>(var);
            if (SimpleVar) {
                constraint->setVariable(SimpleVar, alica::reasoner::SimpleVariable::NO_VALUE);
            }
        }
        c->setConstraint(constraint);
        return;
    }

    auto constraint = new alica::reasoner::SimpleTerm();
    auto SimplePOIVar = reinterpret_cast<alica::reasoner::SimpleVariable*>(c->getStaticVars().at(1));
    if (SimplePOIVar) {
        constraint->setVariable(SimplePOIVar, std::to_string(nextPOI->id));
    } else {
        std::cerr << "Constraint1519914269940: Variable type of POI didn't fit!" << std::endl;
    }

    // DOOR Variable
    auto SimpleDoorVar = reinterpret_cast<alica::reasoner::SimpleVariable*>(c->getStaticVars().at(0));
    if (!SimpleDoorVar) {
        std::cerr << "Constraint1519914269940: Variable type of door didn't fit!" << std::endl;
    } else {
        // is there a door between us and the next POI?
        if (!wm->robot.inSameRoom(nextPOI)) {
            auto nextDoor = robot->movement->getNextDoor(nextPOI);
            if (!nextDoor) {
                constraint->setVariable(SimpleDoorVar, alica::reasoner::SimpleVariable::NO_VALUE);
                return;
            }
            constraint->setVariable(SimpleDoorVar, nextDoor->name);
        } else {
            constraint->setVariable(SimpleDoorVar, alica::reasoner::SimpleVariable::NO_VALUE);
        }
    }
    c->setConstraint(constraint);
    /*PROTECTED REGION END*/
}

// State: DriveToPOI
// State: OpenDoor
// State: AtGoalPOI
// State: WasBlocked
} // namespace alicaAutogenerated
