#include "Plans/Serve/constraints/CarryBook1468494583802Constraints.h"
/*PROTECTED REGION ID(ch1468494583802) ENABLED START*/
#include <asp_commons/ASPCommonsTerm.h>
#include <asp_commons/ASPQueryType.h>
#include <asp_commons/IASPSolver.h>
#include <asp_solver_wrapper/ASPSolverWrapper.h>
#include <engine/AlicaEngine.h>
#include <engine/constraintmodul/ProblemDescriptor.h>
#include <alica_solver_interface/SolverTerm.h>
#include <memory>
#include <ttb/TTBWorldModel.h>
// Add additional using directives here
/*PROTECTED REGION END*/

using std::cout;
using std::exception;
using std::make_shared;
using namespace alica;

namespace alicaAutogenerated
{
// Plan:CarryBook
/*
 * Tasks:
 * - EP:1468494595479 : DefaultTask (1414681164704)
 *
 * States:
 * - CarryBook (1468494595478)
 * - NewSuccessState (1468919156738)
 *
 * Vars:
 * - BookPlanVar (1468494716925)
 */
/*
 * RuntimeCondition - (Name): NewRuntimeCondition
 * (ConditionString):
 * Static Variables: BookPlanVar
 * Domain Variables:
 *
 */
void Constraint1468495216221::getConstraint(shared_ptr<ProblemDescriptor> c, shared_ptr<RunningPlan> rp)
{
    /*PROTECTED REGION ID(cc1468495216221) ENABLED START*/
    ttb::TTBWorldModel* wm = ttb::TTBWorldModel::get();
    auto constraint = new ::reasoner::ASPCommonsTerm();
    // The query id has to be added to any predicate which is added to the program, naming ruleheads and facts!
    auto queryId = ((alica::reasoner::ASPSolverWrapper*) wm->getEngine()->getSolver<alica::reasoner::ASPSolverWrapper>())->getQueryCounter();
    constraint->setQueryId(queryId);
    std::stringstream ss;
    ss << "freeFairyTailBook(X, " << queryId << ") :- book(X), genre(fairyTail), bookGenre(X, fairyTail), not on(X,Y) : agent(Y).";
    constraint->setQueryRule(ss.str());
    constraint->setProgramSection("bookExample");
    constraint->setType(::reasoner::ASPQueryType::Extension);
    constraint->setId(1468495216221);
    // TODO fix after adding asp to topological model
    //        constraint->setExternals(wm->doors.getDoors());
    c->setConstraint(reinterpret_cast<SolverTerm*>(constraint));
    /*PROTECTED REGION END*/
}

// State: CarryBook
// State: NewSuccessState
} // namespace alicaAutogenerated
