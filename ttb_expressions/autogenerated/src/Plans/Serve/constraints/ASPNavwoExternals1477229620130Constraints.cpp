#include "Plans/Serve/constraints/ASPNavwoExternals1477229620130Constraints.h"
/*PROTECTED REGION ID(ch1477229620130) ENABLED START*/
// Add additional using directives here
#include <ttb/TTBWorldModel.h>

#include <asp_commons/ASPQueryType.h>
#include <asp_commons/IASPSolver.h>
#include <asp_solver_wrapper/ASPSolverWrapper.h>
#include <asp_solver_wrapper/ASPTerm.h>

#include <SolverType.h>
#include <engine/AlicaEngine.h>
#include <engine/constraintmodul/ProblemDescriptor.h>
#include <engine/constraintmodul/SolverTerm.h>

#include <memory>
/*PROTECTED REGION END*/

using std::exception;
using std::make_shared;
using std::cout;
using namespace alica;

namespace alicaAutogenerated
{
// Plan:ASPNavwoExternals
/*
* Tasks:
* - EP:1477229620132 : DefaultTask (1414681164704)
*
* States:
* - Nav1 (1477229620131)
* - InnerState (1477229628161)
* - NewSuccessState (1477229672639)
*
* Vars:
* - PlanVar1 (1477229962547)
*/
/*
* RuntimeCondition - (Name): NewRuntimeCondition
* (ConditionString):
* Static Variables: PlanVar1
* Domain Variables:
*
*/
void Constraint1477229706852::getConstraint(shared_ptr<ProblemDescriptor> c, shared_ptr<RunningPlan> rp)
{
    /*PROTECTED REGION ID(cc1477229706852) ENABLED START*/
    ttb::TTBWorldModel *wm = ttb::TTBWorldModel::get();
    auto constraint = make_shared<alica::reasoner::ASPTerm>(-1);
    auto queryId =
        ((alica::reasoner::ASPSolverWrapper *)wm->getEngine()->getSolver(SolverType::ASPSOLVER))->getQueryCounter();
    constraint->setQueryId(queryId);
    stringstream ss;
    ss << "goalReachable(X, 1) :- reachable(X, Y, 1), goal(X, 1), start(Y, 1), room(X, 1), room(Y, 1).";
    constraint->setQueryRule(ss.str());
    ss.str("");
    ss << "goal(r1405B, 1).";
    constraint->addFact(ss.str());
    ss.str("");
    ss << "start(r1411, 1).";
    constraint->addFact(ss.str());
    constraint->setProgramSection("distributedSystemsRooms1");
    constraint->setId(1477229706852);
    constraint->setType(::reasoner::ASPQueryType::Variable);
    c->setConstraint(dynamic_pointer_cast<alica::SolverTerm>(constraint));
    /*PROTECTED REGION END*/
}

// State: Nav1
// State: InnerState
// State: NewSuccessState
}
