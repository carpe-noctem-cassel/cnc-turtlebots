classdef CanMsg < robotics.ros.Message
    %CanMsg MATLAB implementation of msl_actuator_msgs/CanMsg
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'msl_actuator_msgs/CanMsg' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'bd42210221b2280d84f6ed0e3b881126' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        Id
        Data
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Data', 'Id'} % List of non-constant message properties
        ROSPropertyList = {'data', 'id'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = CanMsg(msg)
            %CanMsg Construct the message object CanMsg
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function id = get.Id(obj)
            %get.Id Get the value for property Id
            id = typecast(int8(obj.JavaMessage.getId), 'uint8');
        end
        
        function set.Id(obj, id)
            %set.Id Set the value for property Id
            validateattributes(id, {'numeric'}, {'nonempty', 'scalar'}, 'CanMsg', 'Id');
            
            obj.JavaMessage.setId(id);
        end
        
        function data = get.Data(obj)
            %get.Data Get the value for property Data
            javaArray = obj.JavaMessage.getData;
            array = obj.readJavaArray(javaArray, 'uint8');
            data = uint8(array);
        end
        
        function set.Data(obj, data)
            %set.Data Set the value for property Data
            if ~isvector(data) && isempty(data)
                % Allow empty [] input
                data = uint8.empty(0,1);
            end
            
            validateattributes(data, {'numeric'}, {'vector'}, 'CanMsg', 'Data');
            
            javaArray = obj.JavaMessage.getData;
            array = obj.writeJavaArray(data, javaArray, 'uint8');
            obj.JavaMessage.setData(array);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Id = obj.Id;
            cpObj.Data = obj.Data;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Id = strObj.Id;
            obj.Data = strObj.Data;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Id = obj.Id;
            strObj.Data = obj.Data;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.msl_actuator_msgs.CanMsg.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.msl_actuator_msgs.CanMsg;
            obj.reload(strObj);
        end
    end
end
