classdef KickControl < robotics.ros.Message
    %KickControl MATLAB implementation of msl_actuator_msgs/KickControl
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'msl_actuator_msgs/KickControl' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'e59d224cbef82465a0abb33f78715ee6' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant)
        LEFTEXTENSION = uint8(1)
        RIGHTEXTENSION = uint8(2)
        UPPEREXTENSION = uint8(3)
    end
    
    properties (Dependent)
        SenderID
        Enabled
        Kicker
        Power
        ForceVoltage
        Extension
        ExtTime
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Enabled', 'ExtTime', 'Extension', 'ForceVoltage', 'Kicker', 'Power', 'SenderID'} % List of non-constant message properties
        ROSPropertyList = {'enabled', 'extTime', 'extension', 'forceVoltage', 'kicker', 'power', 'senderID'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = KickControl(msg)
            %KickControl Construct the message object KickControl
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function senderid = get.SenderID(obj)
            %get.SenderID Get the value for property SenderID
            senderid = int32(obj.JavaMessage.getSenderID);
        end
        
        function set.SenderID(obj, senderid)
            %set.SenderID Set the value for property SenderID
            validateattributes(senderid, {'numeric'}, {'nonempty', 'scalar'}, 'KickControl', 'SenderID');
            
            obj.JavaMessage.setSenderID(senderid);
        end
        
        function enabled = get.Enabled(obj)
            %get.Enabled Get the value for property Enabled
            enabled = logical(obj.JavaMessage.getEnabled);
        end
        
        function set.Enabled(obj, enabled)
            %set.Enabled Set the value for property Enabled
            validateattributes(enabled, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'KickControl', 'Enabled');
            
            obj.JavaMessage.setEnabled(enabled);
        end
        
        function kicker = get.Kicker(obj)
            %get.Kicker Get the value for property Kicker
            kicker = typecast(int16(obj.JavaMessage.getKicker), 'uint16');
        end
        
        function set.Kicker(obj, kicker)
            %set.Kicker Set the value for property Kicker
            validateattributes(kicker, {'numeric'}, {'nonempty', 'scalar'}, 'KickControl', 'Kicker');
            
            obj.JavaMessage.setKicker(kicker);
        end
        
        function power = get.Power(obj)
            %get.Power Get the value for property Power
            power = typecast(int16(obj.JavaMessage.getPower), 'uint16');
        end
        
        function set.Power(obj, power)
            %set.Power Set the value for property Power
            validateattributes(power, {'numeric'}, {'nonempty', 'scalar'}, 'KickControl', 'Power');
            
            obj.JavaMessage.setPower(power);
        end
        
        function forcevoltage = get.ForceVoltage(obj)
            %get.ForceVoltage Get the value for property ForceVoltage
            forcevoltage = typecast(int16(obj.JavaMessage.getForceVoltage), 'uint16');
        end
        
        function set.ForceVoltage(obj, forcevoltage)
            %set.ForceVoltage Set the value for property ForceVoltage
            validateattributes(forcevoltage, {'numeric'}, {'nonempty', 'scalar'}, 'KickControl', 'ForceVoltage');
            
            obj.JavaMessage.setForceVoltage(forcevoltage);
        end
        
        function extension = get.Extension(obj)
            %get.Extension Get the value for property Extension
            extension = typecast(int8(obj.JavaMessage.getExtension), 'uint8');
        end
        
        function set.Extension(obj, extension)
            %set.Extension Set the value for property Extension
            validateattributes(extension, {'numeric'}, {'nonempty', 'scalar'}, 'KickControl', 'Extension');
            
            obj.JavaMessage.setExtension(extension);
        end
        
        function exttime = get.ExtTime(obj)
            %get.ExtTime Get the value for property ExtTime
            exttime = typecast(int16(obj.JavaMessage.getExtTime), 'uint16');
        end
        
        function set.ExtTime(obj, exttime)
            %set.ExtTime Set the value for property ExtTime
            validateattributes(exttime, {'numeric'}, {'nonempty', 'scalar'}, 'KickControl', 'ExtTime');
            
            obj.JavaMessage.setExtTime(exttime);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.SenderID = obj.SenderID;
            cpObj.Enabled = obj.Enabled;
            cpObj.Kicker = obj.Kicker;
            cpObj.Power = obj.Power;
            cpObj.ForceVoltage = obj.ForceVoltage;
            cpObj.Extension = obj.Extension;
            cpObj.ExtTime = obj.ExtTime;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.SenderID = strObj.SenderID;
            obj.Enabled = strObj.Enabled;
            obj.Kicker = strObj.Kicker;
            obj.Power = strObj.Power;
            obj.ForceVoltage = strObj.ForceVoltage;
            obj.Extension = strObj.Extension;
            obj.ExtTime = strObj.ExtTime;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.SenderID = obj.SenderID;
            strObj.Enabled = obj.Enabled;
            strObj.Kicker = obj.Kicker;
            strObj.Power = obj.Power;
            strObj.ForceVoltage = obj.ForceVoltage;
            strObj.Extension = obj.Extension;
            strObj.ExtTime = obj.ExtTime;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.msl_actuator_msgs.KickControl.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.msl_actuator_msgs.KickControl;
            obj.reload(strObj);
        end
    end
end
