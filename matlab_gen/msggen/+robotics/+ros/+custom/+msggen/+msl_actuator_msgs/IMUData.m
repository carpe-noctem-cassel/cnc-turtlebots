classdef IMUData < robotics.ros.Message
    %IMUData MATLAB implementation of msl_actuator_msgs/IMUData
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'msl_actuator_msgs/IMUData' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '93b623c15120dfb146e2bfb87d4bbd5a' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        MslMsgsPoint3dInfoClass = robotics.ros.msg.internal.MessageFactory.getClassForType('msl_msgs/Point3dInfo') % Dispatch to MATLAB class for message type msl_msgs/Point3dInfo
    end
    
    properties (Dependent)
        Magnet
        MagnetSens
        Acceleration
        AccelSens
        Gyro
        GyroSens
        Temperature
        Time
    end
    
    properties (Access = protected)
        Cache = struct('Magnet', [], 'Acceleration', [], 'Gyro', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'AccelSens', 'Acceleration', 'Gyro', 'GyroSens', 'Magnet', 'MagnetSens', 'Temperature', 'Time'} % List of non-constant message properties
        ROSPropertyList = {'accelSens', 'acceleration', 'gyro', 'gyroSens', 'magnet', 'magnetSens', 'temperature', 'time'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = IMUData(msg)
            %IMUData Construct the message object IMUData
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function magnet = get.Magnet(obj)
            %get.Magnet Get the value for property Magnet
            if isempty(obj.Cache.Magnet)
                obj.Cache.Magnet = feval(obj.MslMsgsPoint3dInfoClass, obj.JavaMessage.getMagnet);
            end
            magnet = obj.Cache.Magnet;
        end
        
        function set.Magnet(obj, magnet)
            %set.Magnet Set the value for property Magnet
            validateattributes(magnet, {obj.MslMsgsPoint3dInfoClass}, {'nonempty', 'scalar'}, 'IMUData', 'Magnet');
            
            obj.JavaMessage.setMagnet(magnet.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Magnet)
                obj.Cache.Magnet.setJavaObject(magnet.getJavaObject);
            end
        end
        
        function magnetsens = get.MagnetSens(obj)
            %get.MagnetSens Get the value for property MagnetSens
            magnetsens = single(obj.JavaMessage.getMagnetSens);
        end
        
        function set.MagnetSens(obj, magnetsens)
            %set.MagnetSens Set the value for property MagnetSens
            validateattributes(magnetsens, {'numeric'}, {'nonempty', 'scalar'}, 'IMUData', 'MagnetSens');
            
            obj.JavaMessage.setMagnetSens(magnetsens);
        end
        
        function acceleration = get.Acceleration(obj)
            %get.Acceleration Get the value for property Acceleration
            if isempty(obj.Cache.Acceleration)
                obj.Cache.Acceleration = feval(obj.MslMsgsPoint3dInfoClass, obj.JavaMessage.getAcceleration);
            end
            acceleration = obj.Cache.Acceleration;
        end
        
        function set.Acceleration(obj, acceleration)
            %set.Acceleration Set the value for property Acceleration
            validateattributes(acceleration, {obj.MslMsgsPoint3dInfoClass}, {'nonempty', 'scalar'}, 'IMUData', 'Acceleration');
            
            obj.JavaMessage.setAcceleration(acceleration.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Acceleration)
                obj.Cache.Acceleration.setJavaObject(acceleration.getJavaObject);
            end
        end
        
        function accelsens = get.AccelSens(obj)
            %get.AccelSens Get the value for property AccelSens
            accelsens = single(obj.JavaMessage.getAccelSens);
        end
        
        function set.AccelSens(obj, accelsens)
            %set.AccelSens Set the value for property AccelSens
            validateattributes(accelsens, {'numeric'}, {'nonempty', 'scalar'}, 'IMUData', 'AccelSens');
            
            obj.JavaMessage.setAccelSens(accelsens);
        end
        
        function gyro = get.Gyro(obj)
            %get.Gyro Get the value for property Gyro
            if isempty(obj.Cache.Gyro)
                obj.Cache.Gyro = feval(obj.MslMsgsPoint3dInfoClass, obj.JavaMessage.getGyro);
            end
            gyro = obj.Cache.Gyro;
        end
        
        function set.Gyro(obj, gyro)
            %set.Gyro Set the value for property Gyro
            validateattributes(gyro, {obj.MslMsgsPoint3dInfoClass}, {'nonempty', 'scalar'}, 'IMUData', 'Gyro');
            
            obj.JavaMessage.setGyro(gyro.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Gyro)
                obj.Cache.Gyro.setJavaObject(gyro.getJavaObject);
            end
        end
        
        function gyrosens = get.GyroSens(obj)
            %get.GyroSens Get the value for property GyroSens
            gyrosens = single(obj.JavaMessage.getGyroSens);
        end
        
        function set.GyroSens(obj, gyrosens)
            %set.GyroSens Set the value for property GyroSens
            validateattributes(gyrosens, {'numeric'}, {'nonempty', 'scalar'}, 'IMUData', 'GyroSens');
            
            obj.JavaMessage.setGyroSens(gyrosens);
        end
        
        function temperature = get.Temperature(obj)
            %get.Temperature Get the value for property Temperature
            temperature = typecast(int16(obj.JavaMessage.getTemperature), 'uint16');
        end
        
        function set.Temperature(obj, temperature)
            %set.Temperature Set the value for property Temperature
            validateattributes(temperature, {'numeric'}, {'nonempty', 'scalar'}, 'IMUData', 'Temperature');
            
            obj.JavaMessage.setTemperature(temperature);
        end
        
        function time = get.Time(obj)
            %get.Time Get the value for property Time
            time = typecast(int64(obj.JavaMessage.getTime), 'uint64');
        end
        
        function set.Time(obj, time)
            %set.Time Set the value for property Time
            validateattributes(time, {'numeric'}, {'nonempty', 'scalar'}, 'IMUData', 'Time');
            
            obj.JavaMessage.setTime(time);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Magnet = [];
            obj.Cache.Acceleration = [];
            obj.Cache.Gyro = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.MagnetSens = obj.MagnetSens;
            cpObj.AccelSens = obj.AccelSens;
            cpObj.GyroSens = obj.GyroSens;
            cpObj.Temperature = obj.Temperature;
            cpObj.Time = obj.Time;
            
            % Recursively copy compound properties
            cpObj.Magnet = copy(obj.Magnet);
            cpObj.Acceleration = copy(obj.Acceleration);
            cpObj.Gyro = copy(obj.Gyro);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.MagnetSens = strObj.MagnetSens;
            obj.AccelSens = strObj.AccelSens;
            obj.GyroSens = strObj.GyroSens;
            obj.Temperature = strObj.Temperature;
            obj.Time = strObj.Time;
            obj.Magnet = feval([obj.MslMsgsPoint3dInfoClass '.loadobj'], strObj.Magnet);
            obj.Acceleration = feval([obj.MslMsgsPoint3dInfoClass '.loadobj'], strObj.Acceleration);
            obj.Gyro = feval([obj.MslMsgsPoint3dInfoClass '.loadobj'], strObj.Gyro);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.MagnetSens = obj.MagnetSens;
            strObj.AccelSens = obj.AccelSens;
            strObj.GyroSens = obj.GyroSens;
            strObj.Temperature = obj.Temperature;
            strObj.Time = obj.Time;
            strObj.Magnet = saveobj(obj.Magnet);
            strObj.Acceleration = saveobj(obj.Acceleration);
            strObj.Gyro = saveobj(obj.Gyro);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.msl_actuator_msgs.IMUData.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.msl_actuator_msgs.IMUData;
            obj.reload(strObj);
        end
    end
end
