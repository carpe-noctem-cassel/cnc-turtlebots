classdef OdometryInfo < robotics.ros.Message
    %OdometryInfo MATLAB implementation of msl_actuator_msgs/OdometryInfo
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'msl_actuator_msgs/OdometryInfo' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'a36eaacf94b8e6bf49eb052264dfa478' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        MslMsgsMotionInfoClass = robotics.ros.msg.internal.MessageFactory.getClassForType('msl_msgs/MotionInfo') % Dispatch to MATLAB class for message type msl_msgs/MotionInfo
        MslMsgsPositionInfoClass = robotics.ros.msg.internal.MessageFactory.getClassForType('msl_msgs/PositionInfo') % Dispatch to MATLAB class for message type msl_msgs/PositionInfo
    end
    
    properties (Dependent)
        Position
        Motion
        Timestamp
    end
    
    properties (Access = protected)
        Cache = struct('Position', [], 'Motion', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Motion', 'Position', 'Timestamp'} % List of non-constant message properties
        ROSPropertyList = {'motion', 'position', 'timestamp'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = OdometryInfo(msg)
            %OdometryInfo Construct the message object OdometryInfo
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function position = get.Position(obj)
            %get.Position Get the value for property Position
            if isempty(obj.Cache.Position)
                obj.Cache.Position = feval(obj.MslMsgsPositionInfoClass, obj.JavaMessage.getPosition);
            end
            position = obj.Cache.Position;
        end
        
        function set.Position(obj, position)
            %set.Position Set the value for property Position
            validateattributes(position, {obj.MslMsgsPositionInfoClass}, {'nonempty', 'scalar'}, 'OdometryInfo', 'Position');
            
            obj.JavaMessage.setPosition(position.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Position)
                obj.Cache.Position.setJavaObject(position.getJavaObject);
            end
        end
        
        function motion = get.Motion(obj)
            %get.Motion Get the value for property Motion
            if isempty(obj.Cache.Motion)
                obj.Cache.Motion = feval(obj.MslMsgsMotionInfoClass, obj.JavaMessage.getMotion);
            end
            motion = obj.Cache.Motion;
        end
        
        function set.Motion(obj, motion)
            %set.Motion Set the value for property Motion
            validateattributes(motion, {obj.MslMsgsMotionInfoClass}, {'nonempty', 'scalar'}, 'OdometryInfo', 'Motion');
            
            obj.JavaMessage.setMotion(motion.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Motion)
                obj.Cache.Motion.setJavaObject(motion.getJavaObject);
            end
        end
        
        function timestamp = get.Timestamp(obj)
            %get.Timestamp Get the value for property Timestamp
            timestamp = typecast(int64(obj.JavaMessage.getTimestamp), 'uint64');
        end
        
        function set.Timestamp(obj, timestamp)
            %set.Timestamp Set the value for property Timestamp
            validateattributes(timestamp, {'numeric'}, {'nonempty', 'scalar'}, 'OdometryInfo', 'Timestamp');
            
            obj.JavaMessage.setTimestamp(timestamp);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Position = [];
            obj.Cache.Motion = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Timestamp = obj.Timestamp;
            
            % Recursively copy compound properties
            cpObj.Position = copy(obj.Position);
            cpObj.Motion = copy(obj.Motion);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Timestamp = strObj.Timestamp;
            obj.Position = feval([obj.MslMsgsPositionInfoClass '.loadobj'], strObj.Position);
            obj.Motion = feval([obj.MslMsgsMotionInfoClass '.loadobj'], strObj.Motion);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Timestamp = obj.Timestamp;
            strObj.Position = saveobj(obj.Position);
            strObj.Motion = saveobj(obj.Motion);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.msl_actuator_msgs.OdometryInfo.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.msl_actuator_msgs.OdometryInfo;
            obj.reload(strObj);
        end
    end
end
