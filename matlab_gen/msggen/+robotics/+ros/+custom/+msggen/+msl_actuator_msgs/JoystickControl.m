classdef JoystickControl < robotics.ros.Message
    %JoystickControl MATLAB implementation of msl_actuator_msgs/JoystickControl
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'msl_actuator_msgs/JoystickControl' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '8a865d10278d06b620f9e5d9384b45ee' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        MslActuatorMsgsBallCatchCmdClass = robotics.ros.msg.internal.MessageFactory.getClassForType('msl_actuator_msgs/BallCatchCmd') % Dispatch to MATLAB class for message type msl_actuator_msgs/BallCatchCmd
        MslActuatorMsgsBallHandleCmdClass = robotics.ros.msg.internal.MessageFactory.getClassForType('msl_actuator_msgs/BallHandleCmd') % Dispatch to MATLAB class for message type msl_actuator_msgs/BallHandleCmd
        MslActuatorMsgsJoystickRobotIDsClass = robotics.ros.msg.internal.MessageFactory.getClassForType('msl_actuator_msgs/JoystickRobotIDs') % Dispatch to MATLAB class for message type msl_actuator_msgs/JoystickRobotIDs
        MslActuatorMsgsKickControlClass = robotics.ros.msg.internal.MessageFactory.getClassForType('msl_actuator_msgs/KickControl') % Dispatch to MATLAB class for message type msl_actuator_msgs/KickControl
        MslActuatorMsgsShovelSelectCmdClass = robotics.ros.msg.internal.MessageFactory.getClassForType('msl_actuator_msgs/ShovelSelectCmd') % Dispatch to MATLAB class for message type msl_actuator_msgs/ShovelSelectCmd
        MslMsgsMotionInfoClass = robotics.ros.msg.internal.MessageFactory.getClassForType('msl_msgs/MotionInfo') % Dispatch to MATLAB class for message type msl_msgs/MotionInfo
    end
    
    properties (Dependent)
        RobotIDs
        Motion
        Kick
        BallHandle
        Shovel
        BallCatch
    end
    
    properties (Access = protected)
        Cache = struct('RobotIDs', [], 'Motion', [], 'Kick', [], 'BallHandle', [], 'Shovel', [], 'BallCatch', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'BallCatch', 'BallHandle', 'Kick', 'Motion', 'RobotIDs', 'Shovel'} % List of non-constant message properties
        ROSPropertyList = {'ballCatch', 'ballHandle', 'kick', 'motion', 'robotIDs', 'shovel'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = JoystickControl(msg)
            %JoystickControl Construct the message object JoystickControl
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function robotids = get.RobotIDs(obj)
            %get.RobotIDs Get the value for property RobotIDs
            if isempty(obj.Cache.RobotIDs)
                obj.Cache.RobotIDs = feval(obj.MslActuatorMsgsJoystickRobotIDsClass, obj.JavaMessage.getRobotIDs);
            end
            robotids = obj.Cache.RobotIDs;
        end
        
        function set.RobotIDs(obj, robotids)
            %set.RobotIDs Set the value for property RobotIDs
            validateattributes(robotids, {obj.MslActuatorMsgsJoystickRobotIDsClass}, {'nonempty', 'scalar'}, 'JoystickControl', 'RobotIDs');
            
            obj.JavaMessage.setRobotIDs(robotids.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.RobotIDs)
                obj.Cache.RobotIDs.setJavaObject(robotids.getJavaObject);
            end
        end
        
        function motion = get.Motion(obj)
            %get.Motion Get the value for property Motion
            if isempty(obj.Cache.Motion)
                obj.Cache.Motion = feval(obj.MslMsgsMotionInfoClass, obj.JavaMessage.getMotion);
            end
            motion = obj.Cache.Motion;
        end
        
        function set.Motion(obj, motion)
            %set.Motion Set the value for property Motion
            validateattributes(motion, {obj.MslMsgsMotionInfoClass}, {'nonempty', 'scalar'}, 'JoystickControl', 'Motion');
            
            obj.JavaMessage.setMotion(motion.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Motion)
                obj.Cache.Motion.setJavaObject(motion.getJavaObject);
            end
        end
        
        function kick = get.Kick(obj)
            %get.Kick Get the value for property Kick
            if isempty(obj.Cache.Kick)
                obj.Cache.Kick = feval(obj.MslActuatorMsgsKickControlClass, obj.JavaMessage.getKick);
            end
            kick = obj.Cache.Kick;
        end
        
        function set.Kick(obj, kick)
            %set.Kick Set the value for property Kick
            validateattributes(kick, {obj.MslActuatorMsgsKickControlClass}, {'nonempty', 'scalar'}, 'JoystickControl', 'Kick');
            
            obj.JavaMessage.setKick(kick.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Kick)
                obj.Cache.Kick.setJavaObject(kick.getJavaObject);
            end
        end
        
        function ballhandle = get.BallHandle(obj)
            %get.BallHandle Get the value for property BallHandle
            if isempty(obj.Cache.BallHandle)
                obj.Cache.BallHandle = feval(obj.MslActuatorMsgsBallHandleCmdClass, obj.JavaMessage.getBallHandle);
            end
            ballhandle = obj.Cache.BallHandle;
        end
        
        function set.BallHandle(obj, ballhandle)
            %set.BallHandle Set the value for property BallHandle
            validateattributes(ballhandle, {obj.MslActuatorMsgsBallHandleCmdClass}, {'nonempty', 'scalar'}, 'JoystickControl', 'BallHandle');
            
            obj.JavaMessage.setBallHandle(ballhandle.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.BallHandle)
                obj.Cache.BallHandle.setJavaObject(ballhandle.getJavaObject);
            end
        end
        
        function shovel = get.Shovel(obj)
            %get.Shovel Get the value for property Shovel
            if isempty(obj.Cache.Shovel)
                obj.Cache.Shovel = feval(obj.MslActuatorMsgsShovelSelectCmdClass, obj.JavaMessage.getShovel);
            end
            shovel = obj.Cache.Shovel;
        end
        
        function set.Shovel(obj, shovel)
            %set.Shovel Set the value for property Shovel
            validateattributes(shovel, {obj.MslActuatorMsgsShovelSelectCmdClass}, {'nonempty', 'scalar'}, 'JoystickControl', 'Shovel');
            
            obj.JavaMessage.setShovel(shovel.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Shovel)
                obj.Cache.Shovel.setJavaObject(shovel.getJavaObject);
            end
        end
        
        function ballcatch = get.BallCatch(obj)
            %get.BallCatch Get the value for property BallCatch
            if isempty(obj.Cache.BallCatch)
                obj.Cache.BallCatch = feval(obj.MslActuatorMsgsBallCatchCmdClass, obj.JavaMessage.getBallCatch);
            end
            ballcatch = obj.Cache.BallCatch;
        end
        
        function set.BallCatch(obj, ballcatch)
            %set.BallCatch Set the value for property BallCatch
            validateattributes(ballcatch, {obj.MslActuatorMsgsBallCatchCmdClass}, {'nonempty', 'scalar'}, 'JoystickControl', 'BallCatch');
            
            obj.JavaMessage.setBallCatch(ballcatch.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.BallCatch)
                obj.Cache.BallCatch.setJavaObject(ballcatch.getJavaObject);
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.RobotIDs = [];
            obj.Cache.Motion = [];
            obj.Cache.Kick = [];
            obj.Cache.BallHandle = [];
            obj.Cache.Shovel = [];
            obj.Cache.BallCatch = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Recursively copy compound properties
            cpObj.RobotIDs = copy(obj.RobotIDs);
            cpObj.Motion = copy(obj.Motion);
            cpObj.Kick = copy(obj.Kick);
            cpObj.BallHandle = copy(obj.BallHandle);
            cpObj.Shovel = copy(obj.Shovel);
            cpObj.BallCatch = copy(obj.BallCatch);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.RobotIDs = feval([obj.MslActuatorMsgsJoystickRobotIDsClass '.loadobj'], strObj.RobotIDs);
            obj.Motion = feval([obj.MslMsgsMotionInfoClass '.loadobj'], strObj.Motion);
            obj.Kick = feval([obj.MslActuatorMsgsKickControlClass '.loadobj'], strObj.Kick);
            obj.BallHandle = feval([obj.MslActuatorMsgsBallHandleCmdClass '.loadobj'], strObj.BallHandle);
            obj.Shovel = feval([obj.MslActuatorMsgsShovelSelectCmdClass '.loadobj'], strObj.Shovel);
            obj.BallCatch = feval([obj.MslActuatorMsgsBallCatchCmdClass '.loadobj'], strObj.BallCatch);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.RobotIDs = saveobj(obj.RobotIDs);
            strObj.Motion = saveobj(obj.Motion);
            strObj.Kick = saveobj(obj.Kick);
            strObj.BallHandle = saveobj(obj.BallHandle);
            strObj.Shovel = saveobj(obj.Shovel);
            strObj.BallCatch = saveobj(obj.BallCatch);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.msl_actuator_msgs.JoystickControl.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.msl_actuator_msgs.JoystickControl;
            obj.reload(strObj);
        end
    end
end
