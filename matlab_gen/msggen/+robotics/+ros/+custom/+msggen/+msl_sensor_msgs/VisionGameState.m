classdef VisionGameState < robotics.ros.Message
    %VisionGameState MATLAB implementation of msl_sensor_msgs/VisionGameState
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'msl_sensor_msgs/VisionGameState' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'c965fee78945030bdc19ff06e19c4c4b' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant)
        DUEL = int8(1)
        NODUEL = int8(0)
        BALL = int8(1)
        NOBALL = int8(0)
        UNKNOWN = int8(-1)
    end
    
    properties (Dependent)
        Duel
        Haveball
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Duel', 'Haveball'} % List of non-constant message properties
        ROSPropertyList = {'duel', 'haveball'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = VisionGameState(msg)
            %VisionGameState Construct the message object VisionGameState
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function duel = get.Duel(obj)
            %get.Duel Get the value for property Duel
            duel = int8(obj.JavaMessage.getDuel);
        end
        
        function set.Duel(obj, duel)
            %set.Duel Set the value for property Duel
            validateattributes(duel, {'numeric'}, {'nonempty', 'scalar'}, 'VisionGameState', 'Duel');
            
            obj.JavaMessage.setDuel(duel);
        end
        
        function haveball = get.Haveball(obj)
            %get.Haveball Get the value for property Haveball
            haveball = int8(obj.JavaMessage.getHaveball);
        end
        
        function set.Haveball(obj, haveball)
            %set.Haveball Set the value for property Haveball
            validateattributes(haveball, {'numeric'}, {'nonempty', 'scalar'}, 'VisionGameState', 'Haveball');
            
            obj.JavaMessage.setHaveball(haveball);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Duel = obj.Duel;
            cpObj.Haveball = obj.Haveball;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Duel = strObj.Duel;
            obj.Haveball = strObj.Haveball;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Duel = obj.Duel;
            strObj.Haveball = obj.Haveball;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.msl_sensor_msgs.VisionGameState.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.msl_sensor_msgs.VisionGameState;
            obj.reload(strObj);
        end
    end
end
