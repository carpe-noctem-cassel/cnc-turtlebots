classdef SharedWorldInfo < robotics.ros.Message
    %SharedWorldInfo MATLAB implementation of msl_sensor_msgs/SharedWorldInfo
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'msl_sensor_msgs/SharedWorldInfo' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'dfe6d957ea3d992796ad1c749ddbfaa1' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant)
        HAVEBALL = uint8(0)
        LIGHTBARRIERUNBLOCKED = uint8(1)
        NOTINKICKERDISTANCE = uint8(2)
        ASIDEOFKICKER = uint8(3)
        NOBALLSEEN = uint8(4)
    end
    
    properties (Constant, Access = protected)
        MslMsgsPoint2dInfoClass = robotics.ros.msg.internal.MessageFactory.getClassForType('msl_msgs/Point2dInfo') % Dispatch to MATLAB class for message type msl_msgs/Point2dInfo
        MslSensorMsgsBallInfoClass = robotics.ros.msg.internal.MessageFactory.getClassForType('msl_sensor_msgs/BallInfo') % Dispatch to MATLAB class for message type msl_sensor_msgs/BallInfo
        MslSensorMsgsCorrectedOdometryInfoClass = robotics.ros.msg.internal.MessageFactory.getClassForType('msl_sensor_msgs/CorrectedOdometryInfo') % Dispatch to MATLAB class for message type msl_sensor_msgs/CorrectedOdometryInfo
        MslSensorMsgsSharedBallInfoClass = robotics.ros.msg.internal.MessageFactory.getClassForType('msl_sensor_msgs/SharedBallInfo') % Dispatch to MATLAB class for message type msl_sensor_msgs/SharedBallInfo
    end
    
    properties (Dependent)
        SenderID
        Participating
        OwnTeamIsMagenta
        OwnGoalIsYellow
        BallPossessionStatus
        Odom
        Ball
        NegotiatedBall
        SharedBall
        BallInPossession
        Path
        MergedOpponents
        MergedTeamMembers
        Obstacles
    end
    
    properties (Access = protected)
        Cache = struct('Odom', [], 'Ball', [], 'NegotiatedBall', [], 'SharedBall', [], 'Path', [], 'MergedOpponents', [], 'MergedTeamMembers', [], 'Obstacles', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Ball', 'BallInPossession', 'BallPossessionStatus', 'MergedOpponents', 'MergedTeamMembers', 'NegotiatedBall', 'Obstacles', 'Odom', 'OwnGoalIsYellow', 'OwnTeamIsMagenta', 'Participating', 'Path', 'SenderID', 'SharedBall'} % List of non-constant message properties
        ROSPropertyList = {'ball', 'ballInPossession', 'ballPossessionStatus', 'mergedOpponents', 'mergedTeamMembers', 'negotiatedBall', 'obstacles', 'odom', 'ownGoalIsYellow', 'ownTeamIsMagenta', 'participating', 'path', 'senderID', 'sharedBall'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = SharedWorldInfo(msg)
            %SharedWorldInfo Construct the message object SharedWorldInfo
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function senderid = get.SenderID(obj)
            %get.SenderID Get the value for property SenderID
            senderid = int32(obj.JavaMessage.getSenderID);
        end
        
        function set.SenderID(obj, senderid)
            %set.SenderID Set the value for property SenderID
            validateattributes(senderid, {'numeric'}, {'nonempty', 'scalar'}, 'SharedWorldInfo', 'SenderID');
            
            obj.JavaMessage.setSenderID(senderid);
        end
        
        function participating = get.Participating(obj)
            %get.Participating Get the value for property Participating
            participating = logical(obj.JavaMessage.getParticipating);
        end
        
        function set.Participating(obj, participating)
            %set.Participating Set the value for property Participating
            validateattributes(participating, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'SharedWorldInfo', 'Participating');
            
            obj.JavaMessage.setParticipating(participating);
        end
        
        function ownteamismagenta = get.OwnTeamIsMagenta(obj)
            %get.OwnTeamIsMagenta Get the value for property OwnTeamIsMagenta
            ownteamismagenta = logical(obj.JavaMessage.getOwnTeamIsMagenta);
        end
        
        function set.OwnTeamIsMagenta(obj, ownteamismagenta)
            %set.OwnTeamIsMagenta Set the value for property OwnTeamIsMagenta
            validateattributes(ownteamismagenta, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'SharedWorldInfo', 'OwnTeamIsMagenta');
            
            obj.JavaMessage.setOwnTeamIsMagenta(ownteamismagenta);
        end
        
        function owngoalisyellow = get.OwnGoalIsYellow(obj)
            %get.OwnGoalIsYellow Get the value for property OwnGoalIsYellow
            owngoalisyellow = logical(obj.JavaMessage.getOwnGoalIsYellow);
        end
        
        function set.OwnGoalIsYellow(obj, owngoalisyellow)
            %set.OwnGoalIsYellow Set the value for property OwnGoalIsYellow
            validateattributes(owngoalisyellow, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'SharedWorldInfo', 'OwnGoalIsYellow');
            
            obj.JavaMessage.setOwnGoalIsYellow(owngoalisyellow);
        end
        
        function ballpossessionstatus = get.BallPossessionStatus(obj)
            %get.BallPossessionStatus Get the value for property BallPossessionStatus
            ballpossessionstatus = typecast(int8(obj.JavaMessage.getBallPossessionStatus), 'uint8');
        end
        
        function set.BallPossessionStatus(obj, ballpossessionstatus)
            %set.BallPossessionStatus Set the value for property BallPossessionStatus
            validateattributes(ballpossessionstatus, {'numeric'}, {'nonempty', 'scalar'}, 'SharedWorldInfo', 'BallPossessionStatus');
            
            obj.JavaMessage.setBallPossessionStatus(ballpossessionstatus);
        end
        
        function odom = get.Odom(obj)
            %get.Odom Get the value for property Odom
            if isempty(obj.Cache.Odom)
                obj.Cache.Odom = feval(obj.MslSensorMsgsCorrectedOdometryInfoClass, obj.JavaMessage.getOdom);
            end
            odom = obj.Cache.Odom;
        end
        
        function set.Odom(obj, odom)
            %set.Odom Set the value for property Odom
            validateattributes(odom, {obj.MslSensorMsgsCorrectedOdometryInfoClass}, {'nonempty', 'scalar'}, 'SharedWorldInfo', 'Odom');
            
            obj.JavaMessage.setOdom(odom.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Odom)
                obj.Cache.Odom.setJavaObject(odom.getJavaObject);
            end
        end
        
        function ball = get.Ball(obj)
            %get.Ball Get the value for property Ball
            if isempty(obj.Cache.Ball)
                obj.Cache.Ball = feval(obj.MslSensorMsgsBallInfoClass, obj.JavaMessage.getBall);
            end
            ball = obj.Cache.Ball;
        end
        
        function set.Ball(obj, ball)
            %set.Ball Set the value for property Ball
            validateattributes(ball, {obj.MslSensorMsgsBallInfoClass}, {'nonempty', 'scalar'}, 'SharedWorldInfo', 'Ball');
            
            obj.JavaMessage.setBall(ball.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Ball)
                obj.Cache.Ball.setJavaObject(ball.getJavaObject);
            end
        end
        
        function negotiatedball = get.NegotiatedBall(obj)
            %get.NegotiatedBall Get the value for property NegotiatedBall
            if isempty(obj.Cache.NegotiatedBall)
                obj.Cache.NegotiatedBall = feval(obj.MslSensorMsgsBallInfoClass, obj.JavaMessage.getNegotiatedBall);
            end
            negotiatedball = obj.Cache.NegotiatedBall;
        end
        
        function set.NegotiatedBall(obj, negotiatedball)
            %set.NegotiatedBall Set the value for property NegotiatedBall
            validateattributes(negotiatedball, {obj.MslSensorMsgsBallInfoClass}, {'nonempty', 'scalar'}, 'SharedWorldInfo', 'NegotiatedBall');
            
            obj.JavaMessage.setNegotiatedBall(negotiatedball.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.NegotiatedBall)
                obj.Cache.NegotiatedBall.setJavaObject(negotiatedball.getJavaObject);
            end
        end
        
        function sharedball = get.SharedBall(obj)
            %get.SharedBall Get the value for property SharedBall
            if isempty(obj.Cache.SharedBall)
                obj.Cache.SharedBall = feval(obj.MslSensorMsgsSharedBallInfoClass, obj.JavaMessage.getSharedBall);
            end
            sharedball = obj.Cache.SharedBall;
        end
        
        function set.SharedBall(obj, sharedball)
            %set.SharedBall Set the value for property SharedBall
            validateattributes(sharedball, {obj.MslSensorMsgsSharedBallInfoClass}, {'nonempty', 'scalar'}, 'SharedWorldInfo', 'SharedBall');
            
            obj.JavaMessage.setSharedBall(sharedball.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.SharedBall)
                obj.Cache.SharedBall.setJavaObject(sharedball.getJavaObject);
            end
        end
        
        function ballinpossession = get.BallInPossession(obj)
            %get.BallInPossession Get the value for property BallInPossession
            ballinpossession = logical(obj.JavaMessage.getBallInPossession);
        end
        
        function set.BallInPossession(obj, ballinpossession)
            %set.BallInPossession Set the value for property BallInPossession
            validateattributes(ballinpossession, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'SharedWorldInfo', 'BallInPossession');
            
            obj.JavaMessage.setBallInPossession(ballinpossession);
        end
        
        function path = get.Path(obj)
            %get.Path Get the value for property Path
            if isempty(obj.Cache.Path)
                javaArray = obj.JavaMessage.getPath;
                array = obj.readJavaArray(javaArray, obj.MslMsgsPoint2dInfoClass);
                obj.Cache.Path = feval(obj.MslMsgsPoint2dInfoClass, array);
            end
            path = obj.Cache.Path;
        end
        
        function set.Path(obj, path)
            %set.Path Set the value for property Path
            if ~isvector(path) && isempty(path)
                % Allow empty [] input
                path = feval([obj.MslMsgsPoint2dInfoClass '.empty'], 0, 1);
            end
            
            validateattributes(path, {obj.MslMsgsPoint2dInfoClass}, {'vector'}, 'SharedWorldInfo', 'Path');
            
            javaArray = obj.JavaMessage.getPath;
            array = obj.writeJavaArray(path, javaArray, obj.MslMsgsPoint2dInfoClass);
            obj.JavaMessage.setPath(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Path)
                obj.Cache.Path = [];
                obj.Cache.Path = obj.Path;
            end
        end
        
        function mergedopponents = get.MergedOpponents(obj)
            %get.MergedOpponents Get the value for property MergedOpponents
            if isempty(obj.Cache.MergedOpponents)
                javaArray = obj.JavaMessage.getMergedOpponents;
                array = obj.readJavaArray(javaArray, obj.MslMsgsPoint2dInfoClass);
                obj.Cache.MergedOpponents = feval(obj.MslMsgsPoint2dInfoClass, array);
            end
            mergedopponents = obj.Cache.MergedOpponents;
        end
        
        function set.MergedOpponents(obj, mergedopponents)
            %set.MergedOpponents Set the value for property MergedOpponents
            if ~isvector(mergedopponents) && isempty(mergedopponents)
                % Allow empty [] input
                mergedopponents = feval([obj.MslMsgsPoint2dInfoClass '.empty'], 0, 1);
            end
            
            validateattributes(mergedopponents, {obj.MslMsgsPoint2dInfoClass}, {'vector'}, 'SharedWorldInfo', 'MergedOpponents');
            
            javaArray = obj.JavaMessage.getMergedOpponents;
            array = obj.writeJavaArray(mergedopponents, javaArray, obj.MslMsgsPoint2dInfoClass);
            obj.JavaMessage.setMergedOpponents(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.MergedOpponents)
                obj.Cache.MergedOpponents = [];
                obj.Cache.MergedOpponents = obj.MergedOpponents;
            end
        end
        
        function mergedteammembers = get.MergedTeamMembers(obj)
            %get.MergedTeamMembers Get the value for property MergedTeamMembers
            if isempty(obj.Cache.MergedTeamMembers)
                javaArray = obj.JavaMessage.getMergedTeamMembers;
                array = obj.readJavaArray(javaArray, obj.MslMsgsPoint2dInfoClass);
                obj.Cache.MergedTeamMembers = feval(obj.MslMsgsPoint2dInfoClass, array);
            end
            mergedteammembers = obj.Cache.MergedTeamMembers;
        end
        
        function set.MergedTeamMembers(obj, mergedteammembers)
            %set.MergedTeamMembers Set the value for property MergedTeamMembers
            if ~isvector(mergedteammembers) && isempty(mergedteammembers)
                % Allow empty [] input
                mergedteammembers = feval([obj.MslMsgsPoint2dInfoClass '.empty'], 0, 1);
            end
            
            validateattributes(mergedteammembers, {obj.MslMsgsPoint2dInfoClass}, {'vector'}, 'SharedWorldInfo', 'MergedTeamMembers');
            
            javaArray = obj.JavaMessage.getMergedTeamMembers;
            array = obj.writeJavaArray(mergedteammembers, javaArray, obj.MslMsgsPoint2dInfoClass);
            obj.JavaMessage.setMergedTeamMembers(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.MergedTeamMembers)
                obj.Cache.MergedTeamMembers = [];
                obj.Cache.MergedTeamMembers = obj.MergedTeamMembers;
            end
        end
        
        function obstacles = get.Obstacles(obj)
            %get.Obstacles Get the value for property Obstacles
            if isempty(obj.Cache.Obstacles)
                javaArray = obj.JavaMessage.getObstacles;
                array = obj.readJavaArray(javaArray, obj.MslMsgsPoint2dInfoClass);
                obj.Cache.Obstacles = feval(obj.MslMsgsPoint2dInfoClass, array);
            end
            obstacles = obj.Cache.Obstacles;
        end
        
        function set.Obstacles(obj, obstacles)
            %set.Obstacles Set the value for property Obstacles
            if ~isvector(obstacles) && isempty(obstacles)
                % Allow empty [] input
                obstacles = feval([obj.MslMsgsPoint2dInfoClass '.empty'], 0, 1);
            end
            
            validateattributes(obstacles, {obj.MslMsgsPoint2dInfoClass}, {'vector'}, 'SharedWorldInfo', 'Obstacles');
            
            javaArray = obj.JavaMessage.getObstacles;
            array = obj.writeJavaArray(obstacles, javaArray, obj.MslMsgsPoint2dInfoClass);
            obj.JavaMessage.setObstacles(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Obstacles)
                obj.Cache.Obstacles = [];
                obj.Cache.Obstacles = obj.Obstacles;
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Odom = [];
            obj.Cache.Ball = [];
            obj.Cache.NegotiatedBall = [];
            obj.Cache.SharedBall = [];
            obj.Cache.Path = [];
            obj.Cache.MergedOpponents = [];
            obj.Cache.MergedTeamMembers = [];
            obj.Cache.Obstacles = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.SenderID = obj.SenderID;
            cpObj.Participating = obj.Participating;
            cpObj.OwnTeamIsMagenta = obj.OwnTeamIsMagenta;
            cpObj.OwnGoalIsYellow = obj.OwnGoalIsYellow;
            cpObj.BallPossessionStatus = obj.BallPossessionStatus;
            cpObj.BallInPossession = obj.BallInPossession;
            
            % Recursively copy compound properties
            cpObj.Odom = copy(obj.Odom);
            cpObj.Ball = copy(obj.Ball);
            cpObj.NegotiatedBall = copy(obj.NegotiatedBall);
            cpObj.SharedBall = copy(obj.SharedBall);
            cpObj.Path = copy(obj.Path);
            cpObj.MergedOpponents = copy(obj.MergedOpponents);
            cpObj.MergedTeamMembers = copy(obj.MergedTeamMembers);
            cpObj.Obstacles = copy(obj.Obstacles);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.SenderID = strObj.SenderID;
            obj.Participating = strObj.Participating;
            obj.OwnTeamIsMagenta = strObj.OwnTeamIsMagenta;
            obj.OwnGoalIsYellow = strObj.OwnGoalIsYellow;
            obj.BallPossessionStatus = strObj.BallPossessionStatus;
            obj.BallInPossession = strObj.BallInPossession;
            obj.Odom = feval([obj.MslSensorMsgsCorrectedOdometryInfoClass '.loadobj'], strObj.Odom);
            obj.Ball = feval([obj.MslSensorMsgsBallInfoClass '.loadobj'], strObj.Ball);
            obj.NegotiatedBall = feval([obj.MslSensorMsgsBallInfoClass '.loadobj'], strObj.NegotiatedBall);
            obj.SharedBall = feval([obj.MslSensorMsgsSharedBallInfoClass '.loadobj'], strObj.SharedBall);
            PathCell = arrayfun(@(x) feval([obj.MslMsgsPoint2dInfoClass '.loadobj'], x), strObj.Path, 'UniformOutput', false);
            obj.Path = vertcat(PathCell{:});
            MergedOpponentsCell = arrayfun(@(x) feval([obj.MslMsgsPoint2dInfoClass '.loadobj'], x), strObj.MergedOpponents, 'UniformOutput', false);
            obj.MergedOpponents = vertcat(MergedOpponentsCell{:});
            MergedTeamMembersCell = arrayfun(@(x) feval([obj.MslMsgsPoint2dInfoClass '.loadobj'], x), strObj.MergedTeamMembers, 'UniformOutput', false);
            obj.MergedTeamMembers = vertcat(MergedTeamMembersCell{:});
            ObstaclesCell = arrayfun(@(x) feval([obj.MslMsgsPoint2dInfoClass '.loadobj'], x), strObj.Obstacles, 'UniformOutput', false);
            obj.Obstacles = vertcat(ObstaclesCell{:});
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.SenderID = obj.SenderID;
            strObj.Participating = obj.Participating;
            strObj.OwnTeamIsMagenta = obj.OwnTeamIsMagenta;
            strObj.OwnGoalIsYellow = obj.OwnGoalIsYellow;
            strObj.BallPossessionStatus = obj.BallPossessionStatus;
            strObj.BallInPossession = obj.BallInPossession;
            strObj.Odom = saveobj(obj.Odom);
            strObj.Ball = saveobj(obj.Ball);
            strObj.NegotiatedBall = saveobj(obj.NegotiatedBall);
            strObj.SharedBall = saveobj(obj.SharedBall);
            strObj.Path = arrayfun(@(x) saveobj(x), obj.Path);
            strObj.MergedOpponents = arrayfun(@(x) saveobj(x), obj.MergedOpponents);
            strObj.MergedTeamMembers = arrayfun(@(x) saveobj(x), obj.MergedTeamMembers);
            strObj.Obstacles = arrayfun(@(x) saveobj(x), obj.Obstacles);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.msl_sensor_msgs.SharedWorldInfo.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.msl_sensor_msgs.SharedWorldInfo;
            obj.reload(strObj);
        end
    end
end
