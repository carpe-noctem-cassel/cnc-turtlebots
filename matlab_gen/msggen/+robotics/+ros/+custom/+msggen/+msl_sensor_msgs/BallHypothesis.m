classdef BallHypothesis < robotics.ros.Message
    %BallHypothesis MATLAB implementation of msl_sensor_msgs/BallHypothesis
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'msl_sensor_msgs/BallHypothesis' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '4a01026fdb8a5bdbc323e21a24dc8c6f' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        MslMsgsPoint2dInfoClass = robotics.ros.msg.internal.MessageFactory.getClassForType('msl_msgs/Point2dInfo') % Dispatch to MATLAB class for message type msl_msgs/Point2dInfo
        MslMsgsPoint3dInfoClass = robotics.ros.msg.internal.MessageFactory.getClassForType('msl_msgs/Point3dInfo') % Dispatch to MATLAB class for message type msl_msgs/Point3dInfo
    end
    
    properties (Dependent)
        EgoPosition
        CameraCoordinates
        Radius
        Errors
        DetectedNearbyCircles
        Confidence
    end
    
    properties (Access = protected)
        Cache = struct('EgoPosition', [], 'CameraCoordinates', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'CameraCoordinates', 'Confidence', 'DetectedNearbyCircles', 'EgoPosition', 'Errors', 'Radius'} % List of non-constant message properties
        ROSPropertyList = {'cameraCoordinates', 'confidence', 'detectedNearbyCircles', 'egoPosition', 'errors', 'radius'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = BallHypothesis(msg)
            %BallHypothesis Construct the message object BallHypothesis
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function egoposition = get.EgoPosition(obj)
            %get.EgoPosition Get the value for property EgoPosition
            if isempty(obj.Cache.EgoPosition)
                obj.Cache.EgoPosition = feval(obj.MslMsgsPoint3dInfoClass, obj.JavaMessage.getEgoPosition);
            end
            egoposition = obj.Cache.EgoPosition;
        end
        
        function set.EgoPosition(obj, egoposition)
            %set.EgoPosition Set the value for property EgoPosition
            validateattributes(egoposition, {obj.MslMsgsPoint3dInfoClass}, {'nonempty', 'scalar'}, 'BallHypothesis', 'EgoPosition');
            
            obj.JavaMessage.setEgoPosition(egoposition.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.EgoPosition)
                obj.Cache.EgoPosition.setJavaObject(egoposition.getJavaObject);
            end
        end
        
        function cameracoordinates = get.CameraCoordinates(obj)
            %get.CameraCoordinates Get the value for property CameraCoordinates
            if isempty(obj.Cache.CameraCoordinates)
                obj.Cache.CameraCoordinates = feval(obj.MslMsgsPoint2dInfoClass, obj.JavaMessage.getCameraCoordinates);
            end
            cameracoordinates = obj.Cache.CameraCoordinates;
        end
        
        function set.CameraCoordinates(obj, cameracoordinates)
            %set.CameraCoordinates Set the value for property CameraCoordinates
            validateattributes(cameracoordinates, {obj.MslMsgsPoint2dInfoClass}, {'nonempty', 'scalar'}, 'BallHypothesis', 'CameraCoordinates');
            
            obj.JavaMessage.setCameraCoordinates(cameracoordinates.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.CameraCoordinates)
                obj.Cache.CameraCoordinates.setJavaObject(cameracoordinates.getJavaObject);
            end
        end
        
        function radius = get.Radius(obj)
            %get.Radius Get the value for property Radius
            radius = int32(obj.JavaMessage.getRadius);
        end
        
        function set.Radius(obj, radius)
            %set.Radius Set the value for property Radius
            validateattributes(radius, {'numeric'}, {'nonempty', 'scalar'}, 'BallHypothesis', 'Radius');
            
            obj.JavaMessage.setRadius(radius);
        end
        
        function errors = get.Errors(obj)
            %get.Errors Get the value for property Errors
            errors = int32(obj.JavaMessage.getErrors);
        end
        
        function set.Errors(obj, errors)
            %set.Errors Set the value for property Errors
            validateattributes(errors, {'numeric'}, {'nonempty', 'scalar'}, 'BallHypothesis', 'Errors');
            
            obj.JavaMessage.setErrors(errors);
        end
        
        function detectednearbycircles = get.DetectedNearbyCircles(obj)
            %get.DetectedNearbyCircles Get the value for property DetectedNearbyCircles
            detectednearbycircles = int32(obj.JavaMessage.getDetectedNearbyCircles);
        end
        
        function set.DetectedNearbyCircles(obj, detectednearbycircles)
            %set.DetectedNearbyCircles Set the value for property DetectedNearbyCircles
            validateattributes(detectednearbycircles, {'numeric'}, {'nonempty', 'scalar'}, 'BallHypothesis', 'DetectedNearbyCircles');
            
            obj.JavaMessage.setDetectedNearbyCircles(detectednearbycircles);
        end
        
        function confidence = get.Confidence(obj)
            %get.Confidence Get the value for property Confidence
            confidence = double(obj.JavaMessage.getConfidence);
        end
        
        function set.Confidence(obj, confidence)
            %set.Confidence Set the value for property Confidence
            validateattributes(confidence, {'numeric'}, {'nonempty', 'scalar'}, 'BallHypothesis', 'Confidence');
            
            obj.JavaMessage.setConfidence(confidence);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.EgoPosition = [];
            obj.Cache.CameraCoordinates = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Radius = obj.Radius;
            cpObj.Errors = obj.Errors;
            cpObj.DetectedNearbyCircles = obj.DetectedNearbyCircles;
            cpObj.Confidence = obj.Confidence;
            
            % Recursively copy compound properties
            cpObj.EgoPosition = copy(obj.EgoPosition);
            cpObj.CameraCoordinates = copy(obj.CameraCoordinates);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Radius = strObj.Radius;
            obj.Errors = strObj.Errors;
            obj.DetectedNearbyCircles = strObj.DetectedNearbyCircles;
            obj.Confidence = strObj.Confidence;
            obj.EgoPosition = feval([obj.MslMsgsPoint3dInfoClass '.loadobj'], strObj.EgoPosition);
            obj.CameraCoordinates = feval([obj.MslMsgsPoint2dInfoClass '.loadobj'], strObj.CameraCoordinates);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Radius = obj.Radius;
            strObj.Errors = obj.Errors;
            strObj.DetectedNearbyCircles = obj.DetectedNearbyCircles;
            strObj.Confidence = obj.Confidence;
            strObj.EgoPosition = saveobj(obj.EgoPosition);
            strObj.CameraCoordinates = saveobj(obj.CameraCoordinates);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.msl_sensor_msgs.BallHypothesis.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.msl_sensor_msgs.BallHypothesis;
            obj.reload(strObj);
        end
    end
end
