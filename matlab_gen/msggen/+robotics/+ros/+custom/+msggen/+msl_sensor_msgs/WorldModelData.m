classdef WorldModelData < robotics.ros.Message
    %WorldModelData MATLAB implementation of msl_sensor_msgs/WorldModelData
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'msl_sensor_msgs/WorldModelData' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '14a73cf677a4f86e6950ecb80bf5e13c' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        MslSensorMsgsBallInfoClass = robotics.ros.msg.internal.MessageFactory.getClassForType('msl_sensor_msgs/BallInfo') % Dispatch to MATLAB class for message type msl_sensor_msgs/BallInfo
        MslSensorMsgsCorrectedOdometryInfoClass = robotics.ros.msg.internal.MessageFactory.getClassForType('msl_sensor_msgs/CorrectedOdometryInfo') % Dispatch to MATLAB class for message type msl_sensor_msgs/CorrectedOdometryInfo
        MslSensorMsgsDistanceScanInfoClass = robotics.ros.msg.internal.MessageFactory.getClassForType('msl_sensor_msgs/DistanceScanInfo') % Dispatch to MATLAB class for message type msl_sensor_msgs/DistanceScanInfo
        MslSensorMsgsObstacleInfoClass = robotics.ros.msg.internal.MessageFactory.getClassForType('msl_sensor_msgs/ObstacleInfo') % Dispatch to MATLAB class for message type msl_sensor_msgs/ObstacleInfo
    end
    
    properties (Dependent)
        Ball
        DistanceScan
        Odometry
        Timestamp
        Obstacles
    end
    
    properties (Access = protected)
        Cache = struct('Ball', [], 'DistanceScan', [], 'Obstacles', [], 'Odometry', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Ball', 'DistanceScan', 'Obstacles', 'Odometry', 'Timestamp'} % List of non-constant message properties
        ROSPropertyList = {'ball', 'distanceScan', 'obstacles', 'odometry', 'timestamp'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = WorldModelData(msg)
            %WorldModelData Construct the message object WorldModelData
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function ball = get.Ball(obj)
            %get.Ball Get the value for property Ball
            if isempty(obj.Cache.Ball)
                obj.Cache.Ball = feval(obj.MslSensorMsgsBallInfoClass, obj.JavaMessage.getBall);
            end
            ball = obj.Cache.Ball;
        end
        
        function set.Ball(obj, ball)
            %set.Ball Set the value for property Ball
            validateattributes(ball, {obj.MslSensorMsgsBallInfoClass}, {'nonempty', 'scalar'}, 'WorldModelData', 'Ball');
            
            obj.JavaMessage.setBall(ball.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Ball)
                obj.Cache.Ball.setJavaObject(ball.getJavaObject);
            end
        end
        
        function distancescan = get.DistanceScan(obj)
            %get.DistanceScan Get the value for property DistanceScan
            if isempty(obj.Cache.DistanceScan)
                obj.Cache.DistanceScan = feval(obj.MslSensorMsgsDistanceScanInfoClass, obj.JavaMessage.getDistanceScan);
            end
            distancescan = obj.Cache.DistanceScan;
        end
        
        function set.DistanceScan(obj, distancescan)
            %set.DistanceScan Set the value for property DistanceScan
            validateattributes(distancescan, {obj.MslSensorMsgsDistanceScanInfoClass}, {'nonempty', 'scalar'}, 'WorldModelData', 'DistanceScan');
            
            obj.JavaMessage.setDistanceScan(distancescan.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.DistanceScan)
                obj.Cache.DistanceScan.setJavaObject(distancescan.getJavaObject);
            end
        end
        
        function odometry = get.Odometry(obj)
            %get.Odometry Get the value for property Odometry
            if isempty(obj.Cache.Odometry)
                obj.Cache.Odometry = feval(obj.MslSensorMsgsCorrectedOdometryInfoClass, obj.JavaMessage.getOdometry);
            end
            odometry = obj.Cache.Odometry;
        end
        
        function set.Odometry(obj, odometry)
            %set.Odometry Set the value for property Odometry
            validateattributes(odometry, {obj.MslSensorMsgsCorrectedOdometryInfoClass}, {'nonempty', 'scalar'}, 'WorldModelData', 'Odometry');
            
            obj.JavaMessage.setOdometry(odometry.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Odometry)
                obj.Cache.Odometry.setJavaObject(odometry.getJavaObject);
            end
        end
        
        function timestamp = get.Timestamp(obj)
            %get.Timestamp Get the value for property Timestamp
            timestamp = typecast(int64(obj.JavaMessage.getTimestamp), 'uint64');
        end
        
        function set.Timestamp(obj, timestamp)
            %set.Timestamp Set the value for property Timestamp
            validateattributes(timestamp, {'numeric'}, {'nonempty', 'scalar'}, 'WorldModelData', 'Timestamp');
            
            obj.JavaMessage.setTimestamp(timestamp);
        end
        
        function obstacles = get.Obstacles(obj)
            %get.Obstacles Get the value for property Obstacles
            if isempty(obj.Cache.Obstacles)
                javaArray = obj.JavaMessage.getObstacles;
                array = obj.readJavaArray(javaArray, obj.MslSensorMsgsObstacleInfoClass);
                obj.Cache.Obstacles = feval(obj.MslSensorMsgsObstacleInfoClass, array);
            end
            obstacles = obj.Cache.Obstacles;
        end
        
        function set.Obstacles(obj, obstacles)
            %set.Obstacles Set the value for property Obstacles
            if ~isvector(obstacles) && isempty(obstacles)
                % Allow empty [] input
                obstacles = feval([obj.MslSensorMsgsObstacleInfoClass '.empty'], 0, 1);
            end
            
            validateattributes(obstacles, {obj.MslSensorMsgsObstacleInfoClass}, {'vector'}, 'WorldModelData', 'Obstacles');
            
            javaArray = obj.JavaMessage.getObstacles;
            array = obj.writeJavaArray(obstacles, javaArray, obj.MslSensorMsgsObstacleInfoClass);
            obj.JavaMessage.setObstacles(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Obstacles)
                obj.Cache.Obstacles = [];
                obj.Cache.Obstacles = obj.Obstacles;
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Ball = [];
            obj.Cache.DistanceScan = [];
            obj.Cache.Obstacles = [];
            obj.Cache.Odometry = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Timestamp = obj.Timestamp;
            
            % Recursively copy compound properties
            cpObj.Ball = copy(obj.Ball);
            cpObj.DistanceScan = copy(obj.DistanceScan);
            cpObj.Odometry = copy(obj.Odometry);
            cpObj.Obstacles = copy(obj.Obstacles);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Timestamp = strObj.Timestamp;
            obj.Ball = feval([obj.MslSensorMsgsBallInfoClass '.loadobj'], strObj.Ball);
            obj.DistanceScan = feval([obj.MslSensorMsgsDistanceScanInfoClass '.loadobj'], strObj.DistanceScan);
            obj.Odometry = feval([obj.MslSensorMsgsCorrectedOdometryInfoClass '.loadobj'], strObj.Odometry);
            ObstaclesCell = arrayfun(@(x) feval([obj.MslSensorMsgsObstacleInfoClass '.loadobj'], x), strObj.Obstacles, 'UniformOutput', false);
            obj.Obstacles = vertcat(ObstaclesCell{:});
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Timestamp = obj.Timestamp;
            strObj.Ball = saveobj(obj.Ball);
            strObj.DistanceScan = saveobj(obj.DistanceScan);
            strObj.Odometry = saveobj(obj.Odometry);
            strObj.Obstacles = arrayfun(@(x) saveobj(x), obj.Obstacles);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.msl_sensor_msgs.WorldModelData.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.msl_sensor_msgs.WorldModelData;
            obj.reload(strObj);
        end
    end
end
