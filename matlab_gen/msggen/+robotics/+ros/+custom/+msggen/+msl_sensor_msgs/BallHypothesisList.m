classdef BallHypothesisList < robotics.ros.Message
    %BallHypothesisList MATLAB implementation of msl_sensor_msgs/BallHypothesisList
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'msl_sensor_msgs/BallHypothesisList' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'b48c5c3ce2b2a57a055018ee0b7adc2e' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        MslSensorMsgsBallHypothesisClass = robotics.ros.msg.internal.MessageFactory.getClassForType('msl_sensor_msgs/BallHypothesis') % Dispatch to MATLAB class for message type msl_sensor_msgs/BallHypothesis
    end
    
    properties (Dependent)
        ImageTime
        Hypothesis
    end
    
    properties (Access = protected)
        Cache = struct('Hypothesis', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Hypothesis', 'ImageTime'} % List of non-constant message properties
        ROSPropertyList = {'hypothesis', 'imageTime'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = BallHypothesisList(msg)
            %BallHypothesisList Construct the message object BallHypothesisList
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function imagetime = get.ImageTime(obj)
            %get.ImageTime Get the value for property ImageTime
            imagetime = typecast(int64(obj.JavaMessage.getImageTime), 'uint64');
        end
        
        function set.ImageTime(obj, imagetime)
            %set.ImageTime Set the value for property ImageTime
            validateattributes(imagetime, {'numeric'}, {'nonempty', 'scalar'}, 'BallHypothesisList', 'ImageTime');
            
            obj.JavaMessage.setImageTime(imagetime);
        end
        
        function hypothesis = get.Hypothesis(obj)
            %get.Hypothesis Get the value for property Hypothesis
            if isempty(obj.Cache.Hypothesis)
                javaArray = obj.JavaMessage.getHypothesis;
                array = obj.readJavaArray(javaArray, obj.MslSensorMsgsBallHypothesisClass);
                obj.Cache.Hypothesis = feval(obj.MslSensorMsgsBallHypothesisClass, array);
            end
            hypothesis = obj.Cache.Hypothesis;
        end
        
        function set.Hypothesis(obj, hypothesis)
            %set.Hypothesis Set the value for property Hypothesis
            if ~isvector(hypothesis) && isempty(hypothesis)
                % Allow empty [] input
                hypothesis = feval([obj.MslSensorMsgsBallHypothesisClass '.empty'], 0, 1);
            end
            
            validateattributes(hypothesis, {obj.MslSensorMsgsBallHypothesisClass}, {'vector'}, 'BallHypothesisList', 'Hypothesis');
            
            javaArray = obj.JavaMessage.getHypothesis;
            array = obj.writeJavaArray(hypothesis, javaArray, obj.MslSensorMsgsBallHypothesisClass);
            obj.JavaMessage.setHypothesis(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Hypothesis)
                obj.Cache.Hypothesis = [];
                obj.Cache.Hypothesis = obj.Hypothesis;
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Hypothesis = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.ImageTime = obj.ImageTime;
            
            % Recursively copy compound properties
            cpObj.Hypothesis = copy(obj.Hypothesis);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.ImageTime = strObj.ImageTime;
            HypothesisCell = arrayfun(@(x) feval([obj.MslSensorMsgsBallHypothesisClass '.loadobj'], x), strObj.Hypothesis, 'UniformOutput', false);
            obj.Hypothesis = vertcat(HypothesisCell{:});
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.ImageTime = obj.ImageTime;
            strObj.Hypothesis = arrayfun(@(x) saveobj(x), obj.Hypothesis);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.msl_sensor_msgs.BallHypothesisList.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.msl_sensor_msgs.BallHypothesisList;
            obj.reload(strObj);
        end
    end
end
