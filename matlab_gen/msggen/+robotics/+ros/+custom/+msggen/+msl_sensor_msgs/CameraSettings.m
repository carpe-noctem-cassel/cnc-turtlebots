classdef CameraSettings < robotics.ros.Message
    %CameraSettings MATLAB implementation of msl_sensor_msgs/CameraSettings
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'msl_sensor_msgs/CameraSettings' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '1569b57a2f95ecec0422d5cd172e2114' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        SenderID
        ReceiverID
        UseBrightness
        Brightness
        Exposure
        AutoWhiteBalance
        WhiteBalance1
        WhiteBalance2
        Hue
        Saturation
        EnabledGamma
        Gamma
        AutoShutter
        Shutter
        AutoGain
        Gain
    end
    
    properties (Constant, Hidden)
        PropertyList = {'AutoGain', 'AutoShutter', 'AutoWhiteBalance', 'Brightness', 'EnabledGamma', 'Exposure', 'Gain', 'Gamma', 'Hue', 'ReceiverID', 'Saturation', 'SenderID', 'Shutter', 'UseBrightness', 'WhiteBalance1', 'WhiteBalance2'} % List of non-constant message properties
        ROSPropertyList = {'autoGain', 'autoShutter', 'autoWhiteBalance', 'brightness', 'enabledGamma', 'exposure', 'gain', 'gamma', 'hue', 'receiverID', 'saturation', 'senderID', 'shutter', 'useBrightness', 'whiteBalance1', 'whiteBalance2'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = CameraSettings(msg)
            %CameraSettings Construct the message object CameraSettings
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function senderid = get.SenderID(obj)
            %get.SenderID Get the value for property SenderID
            senderid = int32(obj.JavaMessage.getSenderID);
        end
        
        function set.SenderID(obj, senderid)
            %set.SenderID Set the value for property SenderID
            validateattributes(senderid, {'numeric'}, {'nonempty', 'scalar'}, 'CameraSettings', 'SenderID');
            
            obj.JavaMessage.setSenderID(senderid);
        end
        
        function receiverid = get.ReceiverID(obj)
            %get.ReceiverID Get the value for property ReceiverID
            receiverid = int32(obj.JavaMessage.getReceiverID);
        end
        
        function set.ReceiverID(obj, receiverid)
            %set.ReceiverID Set the value for property ReceiverID
            validateattributes(receiverid, {'numeric'}, {'nonempty', 'scalar'}, 'CameraSettings', 'ReceiverID');
            
            obj.JavaMessage.setReceiverID(receiverid);
        end
        
        function usebrightness = get.UseBrightness(obj)
            %get.UseBrightness Get the value for property UseBrightness
            usebrightness = logical(obj.JavaMessage.getUseBrightness);
        end
        
        function set.UseBrightness(obj, usebrightness)
            %set.UseBrightness Set the value for property UseBrightness
            validateattributes(usebrightness, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'CameraSettings', 'UseBrightness');
            
            obj.JavaMessage.setUseBrightness(usebrightness);
        end
        
        function brightness = get.Brightness(obj)
            %get.Brightness Get the value for property Brightness
            brightness = int32(obj.JavaMessage.getBrightness);
        end
        
        function set.Brightness(obj, brightness)
            %set.Brightness Set the value for property Brightness
            validateattributes(brightness, {'numeric'}, {'nonempty', 'scalar'}, 'CameraSettings', 'Brightness');
            
            obj.JavaMessage.setBrightness(brightness);
        end
        
        function exposure = get.Exposure(obj)
            %get.Exposure Get the value for property Exposure
            exposure = int32(obj.JavaMessage.getExposure);
        end
        
        function set.Exposure(obj, exposure)
            %set.Exposure Set the value for property Exposure
            validateattributes(exposure, {'numeric'}, {'nonempty', 'scalar'}, 'CameraSettings', 'Exposure');
            
            obj.JavaMessage.setExposure(exposure);
        end
        
        function autowhitebalance = get.AutoWhiteBalance(obj)
            %get.AutoWhiteBalance Get the value for property AutoWhiteBalance
            autowhitebalance = logical(obj.JavaMessage.getAutoWhiteBalance);
        end
        
        function set.AutoWhiteBalance(obj, autowhitebalance)
            %set.AutoWhiteBalance Set the value for property AutoWhiteBalance
            validateattributes(autowhitebalance, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'CameraSettings', 'AutoWhiteBalance');
            
            obj.JavaMessage.setAutoWhiteBalance(autowhitebalance);
        end
        
        function whitebalance1 = get.WhiteBalance1(obj)
            %get.WhiteBalance1 Get the value for property WhiteBalance1
            whitebalance1 = int32(obj.JavaMessage.getWhiteBalance1);
        end
        
        function set.WhiteBalance1(obj, whitebalance1)
            %set.WhiteBalance1 Set the value for property WhiteBalance1
            validateattributes(whitebalance1, {'numeric'}, {'nonempty', 'scalar'}, 'CameraSettings', 'WhiteBalance1');
            
            obj.JavaMessage.setWhiteBalance1(whitebalance1);
        end
        
        function whitebalance2 = get.WhiteBalance2(obj)
            %get.WhiteBalance2 Get the value for property WhiteBalance2
            whitebalance2 = int32(obj.JavaMessage.getWhiteBalance2);
        end
        
        function set.WhiteBalance2(obj, whitebalance2)
            %set.WhiteBalance2 Set the value for property WhiteBalance2
            validateattributes(whitebalance2, {'numeric'}, {'nonempty', 'scalar'}, 'CameraSettings', 'WhiteBalance2');
            
            obj.JavaMessage.setWhiteBalance2(whitebalance2);
        end
        
        function hue = get.Hue(obj)
            %get.Hue Get the value for property Hue
            hue = int32(obj.JavaMessage.getHue);
        end
        
        function set.Hue(obj, hue)
            %set.Hue Set the value for property Hue
            validateattributes(hue, {'numeric'}, {'nonempty', 'scalar'}, 'CameraSettings', 'Hue');
            
            obj.JavaMessage.setHue(hue);
        end
        
        function saturation = get.Saturation(obj)
            %get.Saturation Get the value for property Saturation
            saturation = int32(obj.JavaMessage.getSaturation);
        end
        
        function set.Saturation(obj, saturation)
            %set.Saturation Set the value for property Saturation
            validateattributes(saturation, {'numeric'}, {'nonempty', 'scalar'}, 'CameraSettings', 'Saturation');
            
            obj.JavaMessage.setSaturation(saturation);
        end
        
        function enabledgamma = get.EnabledGamma(obj)
            %get.EnabledGamma Get the value for property EnabledGamma
            enabledgamma = logical(obj.JavaMessage.getEnabledGamma);
        end
        
        function set.EnabledGamma(obj, enabledgamma)
            %set.EnabledGamma Set the value for property EnabledGamma
            validateattributes(enabledgamma, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'CameraSettings', 'EnabledGamma');
            
            obj.JavaMessage.setEnabledGamma(enabledgamma);
        end
        
        function gamma = get.Gamma(obj)
            %get.Gamma Get the value for property Gamma
            gamma = int32(obj.JavaMessage.getGamma);
        end
        
        function set.Gamma(obj, gamma)
            %set.Gamma Set the value for property Gamma
            validateattributes(gamma, {'numeric'}, {'nonempty', 'scalar'}, 'CameraSettings', 'Gamma');
            
            obj.JavaMessage.setGamma(gamma);
        end
        
        function autoshutter = get.AutoShutter(obj)
            %get.AutoShutter Get the value for property AutoShutter
            autoshutter = logical(obj.JavaMessage.getAutoShutter);
        end
        
        function set.AutoShutter(obj, autoshutter)
            %set.AutoShutter Set the value for property AutoShutter
            validateattributes(autoshutter, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'CameraSettings', 'AutoShutter');
            
            obj.JavaMessage.setAutoShutter(autoshutter);
        end
        
        function shutter = get.Shutter(obj)
            %get.Shutter Get the value for property Shutter
            shutter = int32(obj.JavaMessage.getShutter);
        end
        
        function set.Shutter(obj, shutter)
            %set.Shutter Set the value for property Shutter
            validateattributes(shutter, {'numeric'}, {'nonempty', 'scalar'}, 'CameraSettings', 'Shutter');
            
            obj.JavaMessage.setShutter(shutter);
        end
        
        function autogain = get.AutoGain(obj)
            %get.AutoGain Get the value for property AutoGain
            autogain = logical(obj.JavaMessage.getAutoGain);
        end
        
        function set.AutoGain(obj, autogain)
            %set.AutoGain Set the value for property AutoGain
            validateattributes(autogain, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'CameraSettings', 'AutoGain');
            
            obj.JavaMessage.setAutoGain(autogain);
        end
        
        function gain = get.Gain(obj)
            %get.Gain Get the value for property Gain
            gain = int32(obj.JavaMessage.getGain);
        end
        
        function set.Gain(obj, gain)
            %set.Gain Set the value for property Gain
            validateattributes(gain, {'numeric'}, {'nonempty', 'scalar'}, 'CameraSettings', 'Gain');
            
            obj.JavaMessage.setGain(gain);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.SenderID = obj.SenderID;
            cpObj.ReceiverID = obj.ReceiverID;
            cpObj.UseBrightness = obj.UseBrightness;
            cpObj.Brightness = obj.Brightness;
            cpObj.Exposure = obj.Exposure;
            cpObj.AutoWhiteBalance = obj.AutoWhiteBalance;
            cpObj.WhiteBalance1 = obj.WhiteBalance1;
            cpObj.WhiteBalance2 = obj.WhiteBalance2;
            cpObj.Hue = obj.Hue;
            cpObj.Saturation = obj.Saturation;
            cpObj.EnabledGamma = obj.EnabledGamma;
            cpObj.Gamma = obj.Gamma;
            cpObj.AutoShutter = obj.AutoShutter;
            cpObj.Shutter = obj.Shutter;
            cpObj.AutoGain = obj.AutoGain;
            cpObj.Gain = obj.Gain;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.SenderID = strObj.SenderID;
            obj.ReceiverID = strObj.ReceiverID;
            obj.UseBrightness = strObj.UseBrightness;
            obj.Brightness = strObj.Brightness;
            obj.Exposure = strObj.Exposure;
            obj.AutoWhiteBalance = strObj.AutoWhiteBalance;
            obj.WhiteBalance1 = strObj.WhiteBalance1;
            obj.WhiteBalance2 = strObj.WhiteBalance2;
            obj.Hue = strObj.Hue;
            obj.Saturation = strObj.Saturation;
            obj.EnabledGamma = strObj.EnabledGamma;
            obj.Gamma = strObj.Gamma;
            obj.AutoShutter = strObj.AutoShutter;
            obj.Shutter = strObj.Shutter;
            obj.AutoGain = strObj.AutoGain;
            obj.Gain = strObj.Gain;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.SenderID = obj.SenderID;
            strObj.ReceiverID = obj.ReceiverID;
            strObj.UseBrightness = obj.UseBrightness;
            strObj.Brightness = obj.Brightness;
            strObj.Exposure = obj.Exposure;
            strObj.AutoWhiteBalance = obj.AutoWhiteBalance;
            strObj.WhiteBalance1 = obj.WhiteBalance1;
            strObj.WhiteBalance2 = obj.WhiteBalance2;
            strObj.Hue = obj.Hue;
            strObj.Saturation = obj.Saturation;
            strObj.EnabledGamma = obj.EnabledGamma;
            strObj.Gamma = obj.Gamma;
            strObj.AutoShutter = obj.AutoShutter;
            strObj.Shutter = obj.Shutter;
            strObj.AutoGain = obj.AutoGain;
            strObj.Gain = obj.Gain;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.msl_sensor_msgs.CameraSettings.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.msl_sensor_msgs.CameraSettings;
            obj.reload(strObj);
        end
    end
end
