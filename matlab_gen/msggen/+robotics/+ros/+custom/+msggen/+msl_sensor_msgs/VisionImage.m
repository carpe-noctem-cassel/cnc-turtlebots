classdef VisionImage < robotics.ros.Message
    %VisionImage MATLAB implementation of msl_sensor_msgs/VisionImage
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'msl_sensor_msgs/VisionImage' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '9807a2993f918c190c80817d020c037c' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        SenderID
        Width
        Height
        ImageData
        Params
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Height', 'ImageData', 'Params', 'SenderID', 'Width'} % List of non-constant message properties
        ROSPropertyList = {'height', 'imageData', 'params', 'senderID', 'width'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = VisionImage(msg)
            %VisionImage Construct the message object VisionImage
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function senderid = get.SenderID(obj)
            %get.SenderID Get the value for property SenderID
            senderid = int32(obj.JavaMessage.getSenderID);
        end
        
        function set.SenderID(obj, senderid)
            %set.SenderID Set the value for property SenderID
            validateattributes(senderid, {'numeric'}, {'nonempty', 'scalar'}, 'VisionImage', 'SenderID');
            
            obj.JavaMessage.setSenderID(senderid);
        end
        
        function width = get.Width(obj)
            %get.Width Get the value for property Width
            width = int32(obj.JavaMessage.getWidth);
        end
        
        function set.Width(obj, width)
            %set.Width Set the value for property Width
            validateattributes(width, {'numeric'}, {'nonempty', 'scalar'}, 'VisionImage', 'Width');
            
            obj.JavaMessage.setWidth(width);
        end
        
        function height = get.Height(obj)
            %get.Height Get the value for property Height
            height = int32(obj.JavaMessage.getHeight);
        end
        
        function set.Height(obj, height)
            %set.Height Set the value for property Height
            validateattributes(height, {'numeric'}, {'nonempty', 'scalar'}, 'VisionImage', 'Height');
            
            obj.JavaMessage.setHeight(height);
        end
        
        function imagedata = get.ImageData(obj)
            %get.ImageData Get the value for property ImageData
            javaArray = obj.JavaMessage.getImageData;
            array = obj.readJavaArray(javaArray, 'uint8');
            imagedata = uint8(array);
        end
        
        function set.ImageData(obj, imagedata)
            %set.ImageData Set the value for property ImageData
            if ~isvector(imagedata) && isempty(imagedata)
                % Allow empty [] input
                imagedata = uint8.empty(0,1);
            end
            
            validateattributes(imagedata, {'numeric'}, {'vector'}, 'VisionImage', 'ImageData');
            
            javaArray = obj.JavaMessage.getImageData;
            array = obj.writeJavaArray(imagedata, javaArray, 'uint8');
            obj.JavaMessage.setImageData(array);
        end
        
        function params = get.Params(obj)
            %get.Params Get the value for property Params
            javaArray = obj.JavaMessage.getParams;
            array = obj.readJavaArray(javaArray, 'int32');
            params = int32(array);
        end
        
        function set.Params(obj, params)
            %set.Params Set the value for property Params
            if ~isvector(params) && isempty(params)
                % Allow empty [] input
                params = int32.empty(0,1);
            end
            
            validateattributes(params, {'numeric'}, {'vector'}, 'VisionImage', 'Params');
            
            javaArray = obj.JavaMessage.getParams;
            array = obj.writeJavaArray(params, javaArray, 'int32');
            obj.JavaMessage.setParams(array);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.SenderID = obj.SenderID;
            cpObj.Width = obj.Width;
            cpObj.Height = obj.Height;
            cpObj.ImageData = obj.ImageData;
            cpObj.Params = obj.Params;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.SenderID = strObj.SenderID;
            obj.Width = strObj.Width;
            obj.Height = strObj.Height;
            obj.ImageData = strObj.ImageData;
            obj.Params = strObj.Params;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.SenderID = obj.SenderID;
            strObj.Width = obj.Width;
            strObj.Height = obj.Height;
            strObj.ImageData = obj.ImageData;
            strObj.Params = obj.Params;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.msl_sensor_msgs.VisionImage.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.msl_sensor_msgs.VisionImage;
            obj.reload(strObj);
        end
    end
end
