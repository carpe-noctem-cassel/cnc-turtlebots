classdef VisionDebug < robotics.ros.Message
    %VisionDebug MATLAB implementation of msl_sensor_msgs/VisionDebug
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'msl_sensor_msgs/VisionDebug' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '9919b4848ce420e15aaa0d043c6afdd3' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        MslMsgsPoint2dInfoClass = robotics.ros.msg.internal.MessageFactory.getClassForType('msl_msgs/Point2dInfo') % Dispatch to MATLAB class for message type msl_msgs/Point2dInfo
        MslMsgsPositionInfoClass = robotics.ros.msg.internal.MessageFactory.getClassForType('msl_msgs/PositionInfo') % Dispatch to MATLAB class for message type msl_msgs/PositionInfo
        MslSensorMsgsBallInfoClass = robotics.ros.msg.internal.MessageFactory.getClassForType('msl_sensor_msgs/BallInfo') % Dispatch to MATLAB class for message type msl_sensor_msgs/BallInfo
        MslSensorMsgsDistanceScanInfoClass = robotics.ros.msg.internal.MessageFactory.getClassForType('msl_sensor_msgs/DistanceScanInfo') % Dispatch to MATLAB class for message type msl_sensor_msgs/DistanceScanInfo
        MslSensorMsgsLocalizationTypeClass = robotics.ros.msg.internal.MessageFactory.getClassForType('msl_sensor_msgs/LocalizationType') % Dispatch to MATLAB class for message type msl_sensor_msgs/LocalizationType
        MslSensorMsgsObstacleInfoClass = robotics.ros.msg.internal.MessageFactory.getClassForType('msl_sensor_msgs/ObstacleInfo') % Dispatch to MATLAB class for message type msl_sensor_msgs/ObstacleInfo
    end
    
    properties (Dependent)
        SenderID
        Position
        DistanceScan
        LocType
        Ball
        List
        Obstacles
    end
    
    properties (Access = protected)
        Cache = struct('List', [], 'Position', [], 'DistanceScan', [], 'Obstacles', [], 'LocType', [], 'Ball', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Ball', 'DistanceScan', 'List', 'LocType', 'Obstacles', 'Position', 'SenderID'} % List of non-constant message properties
        ROSPropertyList = {'ball', 'distanceScan', 'list', 'locType', 'obstacles', 'position', 'senderID'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = VisionDebug(msg)
            %VisionDebug Construct the message object VisionDebug
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function senderid = get.SenderID(obj)
            %get.SenderID Get the value for property SenderID
            senderid = int32(obj.JavaMessage.getSenderID);
        end
        
        function set.SenderID(obj, senderid)
            %set.SenderID Set the value for property SenderID
            validateattributes(senderid, {'numeric'}, {'nonempty', 'scalar'}, 'VisionDebug', 'SenderID');
            
            obj.JavaMessage.setSenderID(senderid);
        end
        
        function position = get.Position(obj)
            %get.Position Get the value for property Position
            if isempty(obj.Cache.Position)
                obj.Cache.Position = feval(obj.MslMsgsPositionInfoClass, obj.JavaMessage.getPosition);
            end
            position = obj.Cache.Position;
        end
        
        function set.Position(obj, position)
            %set.Position Set the value for property Position
            validateattributes(position, {obj.MslMsgsPositionInfoClass}, {'nonempty', 'scalar'}, 'VisionDebug', 'Position');
            
            obj.JavaMessage.setPosition(position.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Position)
                obj.Cache.Position.setJavaObject(position.getJavaObject);
            end
        end
        
        function distancescan = get.DistanceScan(obj)
            %get.DistanceScan Get the value for property DistanceScan
            if isempty(obj.Cache.DistanceScan)
                obj.Cache.DistanceScan = feval(obj.MslSensorMsgsDistanceScanInfoClass, obj.JavaMessage.getDistanceScan);
            end
            distancescan = obj.Cache.DistanceScan;
        end
        
        function set.DistanceScan(obj, distancescan)
            %set.DistanceScan Set the value for property DistanceScan
            validateattributes(distancescan, {obj.MslSensorMsgsDistanceScanInfoClass}, {'nonempty', 'scalar'}, 'VisionDebug', 'DistanceScan');
            
            obj.JavaMessage.setDistanceScan(distancescan.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.DistanceScan)
                obj.Cache.DistanceScan.setJavaObject(distancescan.getJavaObject);
            end
        end
        
        function loctype = get.LocType(obj)
            %get.LocType Get the value for property LocType
            if isempty(obj.Cache.LocType)
                obj.Cache.LocType = feval(obj.MslSensorMsgsLocalizationTypeClass, obj.JavaMessage.getLocType);
            end
            loctype = obj.Cache.LocType;
        end
        
        function set.LocType(obj, loctype)
            %set.LocType Set the value for property LocType
            validateattributes(loctype, {obj.MslSensorMsgsLocalizationTypeClass}, {'nonempty', 'scalar'}, 'VisionDebug', 'LocType');
            
            obj.JavaMessage.setLocType(loctype.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.LocType)
                obj.Cache.LocType.setJavaObject(loctype.getJavaObject);
            end
        end
        
        function ball = get.Ball(obj)
            %get.Ball Get the value for property Ball
            if isempty(obj.Cache.Ball)
                obj.Cache.Ball = feval(obj.MslSensorMsgsBallInfoClass, obj.JavaMessage.getBall);
            end
            ball = obj.Cache.Ball;
        end
        
        function set.Ball(obj, ball)
            %set.Ball Set the value for property Ball
            validateattributes(ball, {obj.MslSensorMsgsBallInfoClass}, {'nonempty', 'scalar'}, 'VisionDebug', 'Ball');
            
            obj.JavaMessage.setBall(ball.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Ball)
                obj.Cache.Ball.setJavaObject(ball.getJavaObject);
            end
        end
        
        function list = get.List(obj)
            %get.List Get the value for property List
            if isempty(obj.Cache.List)
                javaArray = obj.JavaMessage.getList;
                array = obj.readJavaArray(javaArray, obj.MslMsgsPoint2dInfoClass);
                obj.Cache.List = feval(obj.MslMsgsPoint2dInfoClass, array);
            end
            list = obj.Cache.List;
        end
        
        function set.List(obj, list)
            %set.List Set the value for property List
            if ~isvector(list) && isempty(list)
                % Allow empty [] input
                list = feval([obj.MslMsgsPoint2dInfoClass '.empty'], 0, 1);
            end
            
            validateattributes(list, {obj.MslMsgsPoint2dInfoClass}, {'vector'}, 'VisionDebug', 'List');
            
            javaArray = obj.JavaMessage.getList;
            array = obj.writeJavaArray(list, javaArray, obj.MslMsgsPoint2dInfoClass);
            obj.JavaMessage.setList(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.List)
                obj.Cache.List = [];
                obj.Cache.List = obj.List;
            end
        end
        
        function obstacles = get.Obstacles(obj)
            %get.Obstacles Get the value for property Obstacles
            if isempty(obj.Cache.Obstacles)
                javaArray = obj.JavaMessage.getObstacles;
                array = obj.readJavaArray(javaArray, obj.MslSensorMsgsObstacleInfoClass);
                obj.Cache.Obstacles = feval(obj.MslSensorMsgsObstacleInfoClass, array);
            end
            obstacles = obj.Cache.Obstacles;
        end
        
        function set.Obstacles(obj, obstacles)
            %set.Obstacles Set the value for property Obstacles
            if ~isvector(obstacles) && isempty(obstacles)
                % Allow empty [] input
                obstacles = feval([obj.MslSensorMsgsObstacleInfoClass '.empty'], 0, 1);
            end
            
            validateattributes(obstacles, {obj.MslSensorMsgsObstacleInfoClass}, {'vector'}, 'VisionDebug', 'Obstacles');
            
            javaArray = obj.JavaMessage.getObstacles;
            array = obj.writeJavaArray(obstacles, javaArray, obj.MslSensorMsgsObstacleInfoClass);
            obj.JavaMessage.setObstacles(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Obstacles)
                obj.Cache.Obstacles = [];
                obj.Cache.Obstacles = obj.Obstacles;
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.List = [];
            obj.Cache.Position = [];
            obj.Cache.DistanceScan = [];
            obj.Cache.Obstacles = [];
            obj.Cache.LocType = [];
            obj.Cache.Ball = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.SenderID = obj.SenderID;
            
            % Recursively copy compound properties
            cpObj.Position = copy(obj.Position);
            cpObj.DistanceScan = copy(obj.DistanceScan);
            cpObj.LocType = copy(obj.LocType);
            cpObj.Ball = copy(obj.Ball);
            cpObj.List = copy(obj.List);
            cpObj.Obstacles = copy(obj.Obstacles);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.SenderID = strObj.SenderID;
            obj.Position = feval([obj.MslMsgsPositionInfoClass '.loadobj'], strObj.Position);
            obj.DistanceScan = feval([obj.MslSensorMsgsDistanceScanInfoClass '.loadobj'], strObj.DistanceScan);
            obj.LocType = feval([obj.MslSensorMsgsLocalizationTypeClass '.loadobj'], strObj.LocType);
            obj.Ball = feval([obj.MslSensorMsgsBallInfoClass '.loadobj'], strObj.Ball);
            ListCell = arrayfun(@(x) feval([obj.MslMsgsPoint2dInfoClass '.loadobj'], x), strObj.List, 'UniformOutput', false);
            obj.List = vertcat(ListCell{:});
            ObstaclesCell = arrayfun(@(x) feval([obj.MslSensorMsgsObstacleInfoClass '.loadobj'], x), strObj.Obstacles, 'UniformOutput', false);
            obj.Obstacles = vertcat(ObstaclesCell{:});
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.SenderID = obj.SenderID;
            strObj.Position = saveobj(obj.Position);
            strObj.DistanceScan = saveobj(obj.DistanceScan);
            strObj.LocType = saveobj(obj.LocType);
            strObj.Ball = saveobj(obj.Ball);
            strObj.List = arrayfun(@(x) saveobj(x), obj.List);
            strObj.Obstacles = arrayfun(@(x) saveobj(x), obj.Obstacles);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.msl_sensor_msgs.VisionDebug.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.msl_sensor_msgs.VisionDebug;
            obj.reload(strObj);
        end
    end
end
