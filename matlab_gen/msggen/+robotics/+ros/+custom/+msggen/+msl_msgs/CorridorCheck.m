classdef CorridorCheck < robotics.ros.Message
    %CorridorCheck MATLAB implementation of msl_msgs/CorridorCheck
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'msl_msgs/CorridorCheck' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'db0dfa1d80f5598df7b5a411d583a776' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        MslMsgsPoint2dInfoClass = robotics.ros.msg.internal.MessageFactory.getClassForType('msl_msgs/Point2dInfo') % Dispatch to MATLAB class for message type msl_msgs/Point2dInfo
    end
    
    properties (Dependent)
        SenderId
        CorridorPoints
    end
    
    properties (Access = protected)
        Cache = struct('CorridorPoints', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'CorridorPoints', 'SenderId'} % List of non-constant message properties
        ROSPropertyList = {'corridorPoints', 'senderId'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = CorridorCheck(msg)
            %CorridorCheck Construct the message object CorridorCheck
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function senderid = get.SenderId(obj)
            %get.SenderId Get the value for property SenderId
            senderid = int32(obj.JavaMessage.getSenderId);
        end
        
        function set.SenderId(obj, senderid)
            %set.SenderId Set the value for property SenderId
            validateattributes(senderid, {'numeric'}, {'nonempty', 'scalar'}, 'CorridorCheck', 'SenderId');
            
            obj.JavaMessage.setSenderId(senderid);
        end
        
        function corridorpoints = get.CorridorPoints(obj)
            %get.CorridorPoints Get the value for property CorridorPoints
            if isempty(obj.Cache.CorridorPoints)
                javaArray = obj.JavaMessage.getCorridorPoints;
                array = obj.readJavaArray(javaArray, obj.MslMsgsPoint2dInfoClass);
                obj.Cache.CorridorPoints = feval(obj.MslMsgsPoint2dInfoClass, array);
            end
            corridorpoints = obj.Cache.CorridorPoints;
        end
        
        function set.CorridorPoints(obj, corridorpoints)
            %set.CorridorPoints Set the value for property CorridorPoints
            if ~isvector(corridorpoints) && isempty(corridorpoints)
                % Allow empty [] input
                corridorpoints = feval([obj.MslMsgsPoint2dInfoClass '.empty'], 0, 1);
            end
            
            validateattributes(corridorpoints, {obj.MslMsgsPoint2dInfoClass}, {'vector'}, 'CorridorCheck', 'CorridorPoints');
            
            javaArray = obj.JavaMessage.getCorridorPoints;
            array = obj.writeJavaArray(corridorpoints, javaArray, obj.MslMsgsPoint2dInfoClass);
            obj.JavaMessage.setCorridorPoints(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.CorridorPoints)
                obj.Cache.CorridorPoints = [];
                obj.Cache.CorridorPoints = obj.CorridorPoints;
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.CorridorPoints = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.SenderId = obj.SenderId;
            
            % Recursively copy compound properties
            cpObj.CorridorPoints = copy(obj.CorridorPoints);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.SenderId = strObj.SenderId;
            CorridorPointsCell = arrayfun(@(x) feval([obj.MslMsgsPoint2dInfoClass '.loadobj'], x), strObj.CorridorPoints, 'UniformOutput', false);
            obj.CorridorPoints = vertcat(CorridorPointsCell{:});
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.SenderId = obj.SenderId;
            strObj.CorridorPoints = arrayfun(@(x) saveobj(x), obj.CorridorPoints);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.msl_msgs.CorridorCheck.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.msl_msgs.CorridorCheck;
            obj.reload(strObj);
        end
    end
end
