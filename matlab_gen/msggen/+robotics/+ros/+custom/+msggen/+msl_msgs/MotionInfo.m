classdef MotionInfo < robotics.ros.Message
    %MotionInfo MATLAB implementation of msl_msgs/MotionInfo
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'msl_msgs/MotionInfo' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '5e734b9058a37842c0bd3937a51c14b8' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        Angle
        Translation
        Rotation
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Angle', 'Rotation', 'Translation'} % List of non-constant message properties
        ROSPropertyList = {'angle', 'rotation', 'translation'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = MotionInfo(msg)
            %MotionInfo Construct the message object MotionInfo
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function angle = get.Angle(obj)
            %get.Angle Get the value for property Angle
            angle = double(obj.JavaMessage.getAngle);
        end
        
        function set.Angle(obj, angle)
            %set.Angle Set the value for property Angle
            validateattributes(angle, {'numeric'}, {'nonempty', 'scalar'}, 'MotionInfo', 'Angle');
            
            obj.JavaMessage.setAngle(angle);
        end
        
        function translation = get.Translation(obj)
            %get.Translation Get the value for property Translation
            translation = double(obj.JavaMessage.getTranslation);
        end
        
        function set.Translation(obj, translation)
            %set.Translation Set the value for property Translation
            validateattributes(translation, {'numeric'}, {'nonempty', 'scalar'}, 'MotionInfo', 'Translation');
            
            obj.JavaMessage.setTranslation(translation);
        end
        
        function rotation = get.Rotation(obj)
            %get.Rotation Get the value for property Rotation
            rotation = double(obj.JavaMessage.getRotation);
        end
        
        function set.Rotation(obj, rotation)
            %set.Rotation Set the value for property Rotation
            validateattributes(rotation, {'numeric'}, {'nonempty', 'scalar'}, 'MotionInfo', 'Rotation');
            
            obj.JavaMessage.setRotation(rotation);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Angle = obj.Angle;
            cpObj.Translation = obj.Translation;
            cpObj.Rotation = obj.Rotation;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Angle = strObj.Angle;
            obj.Translation = strObj.Translation;
            obj.Rotation = strObj.Rotation;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Angle = obj.Angle;
            strObj.Translation = obj.Translation;
            strObj.Rotation = obj.Rotation;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.msl_msgs.MotionInfo.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.msl_msgs.MotionInfo;
            obj.reload(strObj);
        end
    end
end
