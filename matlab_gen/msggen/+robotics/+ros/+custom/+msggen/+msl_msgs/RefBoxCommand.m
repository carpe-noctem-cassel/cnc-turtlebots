classdef RefBoxCommand < robotics.ros.Message
    %RefBoxCommand MATLAB implementation of msl_msgs/RefBoxCommand
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'msl_msgs/RefBoxCommand' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'd2a9e7c20f50ad644ebfa430c93a1f0d' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant)
        COMMANDJOYSTICK = uint8(255)
        START = uint8(115)
        STOP = uint8(83)
        HALT = uint8(72)
        READY = uint8(32)
        FIRSTHALF = uint8(49)
        HALFTIME = uint8(104)
        SECONDHALF = uint8(50)
        ENDGAME = uint8(101)
        CANCEL = uint8(120)
        PARK = uint8(76)
        RESTART = uint8(110)
        CORNERMAGENTA = uint8(99)
        CORNERCYAN = uint8(67)
        KICKOFFMAGENTA = uint8(107)
        KICKOFFCYAN = uint8(75)
        FREEKICKMAGENTA = uint8(102)
        FREEKICKCYAN = uint8(70)
        GOALKICKMAGENTA = uint8(103)
        GOALKICKCYAN = uint8(71)
        THROWINMAGENTA = uint8(116)
        THROWINCYAN = uint8(84)
        PENALTYMAGENTA = uint8(112)
        PENALTYCYAN = uint8(80)
        DROPBALL = uint8(78)
        DUMMY = uint8(42)
        GOALMAGENTA = uint8(97)
        GOALCYAN = uint8(65)
        REMOVEGOALMAGENTA = uint8(100)
        REMOVEGOALCYAN = uint8(68)
        OUTFORREPAIRMAGENTA = uint8(111)
        OUTFORREPAIRCYAN = uint8(79)
        INFORREPAIRMAGENTA = uint8(105)
        INFORREPAIRCYAN = uint8(73)
    end
    
    properties (Constant, Access = protected)
        MslMsgsGameStageClass = robotics.ros.msg.internal.MessageFactory.getClassForType('msl_msgs/GameStage') % Dispatch to MATLAB class for message type msl_msgs/GameStage
        MslMsgsRefBoxStateClass = robotics.ros.msg.internal.MessageFactory.getClassForType('msl_msgs/RefBoxState') % Dispatch to MATLAB class for message type msl_msgs/RefBoxState
    end
    
    properties (Dependent)
        State
        Cmd
        GameStage
        ElapsedSeconds
        GoalsCyan
        GoalsMagenta
    end
    
    properties (Access = protected)
        Cache = struct('State', [], 'GameStage', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Cmd', 'ElapsedSeconds', 'GameStage', 'GoalsCyan', 'GoalsMagenta', 'State'} % List of non-constant message properties
        ROSPropertyList = {'cmd', 'elapsedSeconds', 'gameStage', 'goalsCyan', 'goalsMagenta', 'state'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = RefBoxCommand(msg)
            %RefBoxCommand Construct the message object RefBoxCommand
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function state = get.State(obj)
            %get.State Get the value for property State
            if isempty(obj.Cache.State)
                obj.Cache.State = feval(obj.MslMsgsRefBoxStateClass, obj.JavaMessage.getState);
            end
            state = obj.Cache.State;
        end
        
        function set.State(obj, state)
            %set.State Set the value for property State
            validateattributes(state, {obj.MslMsgsRefBoxStateClass}, {'nonempty', 'scalar'}, 'RefBoxCommand', 'State');
            
            obj.JavaMessage.setState(state.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.State)
                obj.Cache.State.setJavaObject(state.getJavaObject);
            end
        end
        
        function cmd = get.Cmd(obj)
            %get.Cmd Get the value for property Cmd
            cmd = typecast(int8(obj.JavaMessage.getCmd), 'uint8');
        end
        
        function set.Cmd(obj, cmd)
            %set.Cmd Set the value for property Cmd
            validateattributes(cmd, {'numeric'}, {'nonempty', 'scalar'}, 'RefBoxCommand', 'Cmd');
            
            obj.JavaMessage.setCmd(cmd);
        end
        
        function gamestage = get.GameStage(obj)
            %get.GameStage Get the value for property GameStage
            if isempty(obj.Cache.GameStage)
                obj.Cache.GameStage = feval(obj.MslMsgsGameStageClass, obj.JavaMessage.getGameStage);
            end
            gamestage = obj.Cache.GameStage;
        end
        
        function set.GameStage(obj, gamestage)
            %set.GameStage Set the value for property GameStage
            validateattributes(gamestage, {obj.MslMsgsGameStageClass}, {'nonempty', 'scalar'}, 'RefBoxCommand', 'GameStage');
            
            obj.JavaMessage.setGameStage(gamestage.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.GameStage)
                obj.Cache.GameStage.setJavaObject(gamestage.getJavaObject);
            end
        end
        
        function elapsedseconds = get.ElapsedSeconds(obj)
            %get.ElapsedSeconds Get the value for property ElapsedSeconds
            elapsedseconds = typecast(int16(obj.JavaMessage.getElapsedSeconds), 'uint16');
        end
        
        function set.ElapsedSeconds(obj, elapsedseconds)
            %set.ElapsedSeconds Set the value for property ElapsedSeconds
            validateattributes(elapsedseconds, {'numeric'}, {'nonempty', 'scalar'}, 'RefBoxCommand', 'ElapsedSeconds');
            
            obj.JavaMessage.setElapsedSeconds(elapsedseconds);
        end
        
        function goalscyan = get.GoalsCyan(obj)
            %get.GoalsCyan Get the value for property GoalsCyan
            goalscyan = typecast(int8(obj.JavaMessage.getGoalsCyan), 'uint8');
        end
        
        function set.GoalsCyan(obj, goalscyan)
            %set.GoalsCyan Set the value for property GoalsCyan
            validateattributes(goalscyan, {'numeric'}, {'nonempty', 'scalar'}, 'RefBoxCommand', 'GoalsCyan');
            
            obj.JavaMessage.setGoalsCyan(goalscyan);
        end
        
        function goalsmagenta = get.GoalsMagenta(obj)
            %get.GoalsMagenta Get the value for property GoalsMagenta
            goalsmagenta = typecast(int8(obj.JavaMessage.getGoalsMagenta), 'uint8');
        end
        
        function set.GoalsMagenta(obj, goalsmagenta)
            %set.GoalsMagenta Set the value for property GoalsMagenta
            validateattributes(goalsmagenta, {'numeric'}, {'nonempty', 'scalar'}, 'RefBoxCommand', 'GoalsMagenta');
            
            obj.JavaMessage.setGoalsMagenta(goalsmagenta);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.State = [];
            obj.Cache.GameStage = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Cmd = obj.Cmd;
            cpObj.ElapsedSeconds = obj.ElapsedSeconds;
            cpObj.GoalsCyan = obj.GoalsCyan;
            cpObj.GoalsMagenta = obj.GoalsMagenta;
            
            % Recursively copy compound properties
            cpObj.State = copy(obj.State);
            cpObj.GameStage = copy(obj.GameStage);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Cmd = strObj.Cmd;
            obj.ElapsedSeconds = strObj.ElapsedSeconds;
            obj.GoalsCyan = strObj.GoalsCyan;
            obj.GoalsMagenta = strObj.GoalsMagenta;
            obj.State = feval([obj.MslMsgsRefBoxStateClass '.loadobj'], strObj.State);
            obj.GameStage = feval([obj.MslMsgsGameStageClass '.loadobj'], strObj.GameStage);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Cmd = obj.Cmd;
            strObj.ElapsedSeconds = obj.ElapsedSeconds;
            strObj.GoalsCyan = obj.GoalsCyan;
            strObj.GoalsMagenta = obj.GoalsMagenta;
            strObj.State = saveobj(obj.State);
            strObj.GameStage = saveobj(obj.GameStage);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.msl_msgs.RefBoxCommand.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.msl_msgs.RefBoxCommand;
            obj.reload(strObj);
        end
    end
end
