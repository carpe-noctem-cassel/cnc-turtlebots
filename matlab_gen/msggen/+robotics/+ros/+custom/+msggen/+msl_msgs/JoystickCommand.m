classdef JoystickCommand < robotics.ros.Message
    %JoystickCommand MATLAB implementation of msl_msgs/JoystickCommand
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'msl_msgs/JoystickCommand' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '38f7f540c956f003699cbce96b23b3c6' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant)
        BALLHANDLEON = int8(1)
        BALLHANDLEOFF = int8(0)
        PTCONTROLLERON = int8(1)
        PTCONTROLLEROFF = int8(0)
    end
    
    properties (Constant, Access = protected)
        MslMsgsMotionInfoClass = robotics.ros.msg.internal.MessageFactory.getClassForType('msl_msgs/MotionInfo') % Dispatch to MATLAB class for message type msl_msgs/MotionInfo
    end
    
    properties (Dependent)
        Kick
        RobotId
        Motion
        KickPower
        ShovelIdx
        BallHandleLeftMotor
        BallHandleRightMotor
        BallHandleState
        PtControllerState
    end
    
    properties (Access = protected)
        Cache = struct('Motion', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'BallHandleLeftMotor', 'BallHandleRightMotor', 'BallHandleState', 'Kick', 'KickPower', 'Motion', 'PtControllerState', 'RobotId', 'ShovelIdx'} % List of non-constant message properties
        ROSPropertyList = {'ballHandleLeftMotor', 'ballHandleRightMotor', 'ballHandleState', 'kick', 'kickPower', 'motion', 'ptControllerState', 'robotId', 'shovelIdx'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = JoystickCommand(msg)
            %JoystickCommand Construct the message object JoystickCommand
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function kick = get.Kick(obj)
            %get.Kick Get the value for property Kick
            kick = logical(obj.JavaMessage.getKick);
        end
        
        function set.Kick(obj, kick)
            %set.Kick Set the value for property Kick
            validateattributes(kick, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'JoystickCommand', 'Kick');
            
            obj.JavaMessage.setKick(kick);
        end
        
        function robotid = get.RobotId(obj)
            %get.RobotId Get the value for property RobotId
            robotid = int32(obj.JavaMessage.getRobotId);
        end
        
        function set.RobotId(obj, robotid)
            %set.RobotId Set the value for property RobotId
            validateattributes(robotid, {'numeric'}, {'nonempty', 'scalar'}, 'JoystickCommand', 'RobotId');
            
            obj.JavaMessage.setRobotId(robotid);
        end
        
        function motion = get.Motion(obj)
            %get.Motion Get the value for property Motion
            if isempty(obj.Cache.Motion)
                obj.Cache.Motion = feval(obj.MslMsgsMotionInfoClass, obj.JavaMessage.getMotion);
            end
            motion = obj.Cache.Motion;
        end
        
        function set.Motion(obj, motion)
            %set.Motion Set the value for property Motion
            validateattributes(motion, {obj.MslMsgsMotionInfoClass}, {'nonempty', 'scalar'}, 'JoystickCommand', 'Motion');
            
            obj.JavaMessage.setMotion(motion.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Motion)
                obj.Cache.Motion.setJavaObject(motion.getJavaObject);
            end
        end
        
        function kickpower = get.KickPower(obj)
            %get.KickPower Get the value for property KickPower
            kickpower = typecast(int16(obj.JavaMessage.getKickPower), 'uint16');
        end
        
        function set.KickPower(obj, kickpower)
            %set.KickPower Set the value for property KickPower
            validateattributes(kickpower, {'numeric'}, {'nonempty', 'scalar'}, 'JoystickCommand', 'KickPower');
            
            obj.JavaMessage.setKickPower(kickpower);
        end
        
        function shovelidx = get.ShovelIdx(obj)
            %get.ShovelIdx Get the value for property ShovelIdx
            shovelidx = int8(obj.JavaMessage.getShovelIdx);
        end
        
        function set.ShovelIdx(obj, shovelidx)
            %set.ShovelIdx Set the value for property ShovelIdx
            validateattributes(shovelidx, {'numeric'}, {'nonempty', 'scalar'}, 'JoystickCommand', 'ShovelIdx');
            
            obj.JavaMessage.setShovelIdx(shovelidx);
        end
        
        function ballhandleleftmotor = get.BallHandleLeftMotor(obj)
            %get.BallHandleLeftMotor Get the value for property BallHandleLeftMotor
            ballhandleleftmotor = int32(obj.JavaMessage.getBallHandleLeftMotor);
        end
        
        function set.BallHandleLeftMotor(obj, ballhandleleftmotor)
            %set.BallHandleLeftMotor Set the value for property BallHandleLeftMotor
            validateattributes(ballhandleleftmotor, {'numeric'}, {'nonempty', 'scalar'}, 'JoystickCommand', 'BallHandleLeftMotor');
            
            obj.JavaMessage.setBallHandleLeftMotor(ballhandleleftmotor);
        end
        
        function ballhandlerightmotor = get.BallHandleRightMotor(obj)
            %get.BallHandleRightMotor Get the value for property BallHandleRightMotor
            ballhandlerightmotor = int32(obj.JavaMessage.getBallHandleRightMotor);
        end
        
        function set.BallHandleRightMotor(obj, ballhandlerightmotor)
            %set.BallHandleRightMotor Set the value for property BallHandleRightMotor
            validateattributes(ballhandlerightmotor, {'numeric'}, {'nonempty', 'scalar'}, 'JoystickCommand', 'BallHandleRightMotor');
            
            obj.JavaMessage.setBallHandleRightMotor(ballhandlerightmotor);
        end
        
        function ballhandlestate = get.BallHandleState(obj)
            %get.BallHandleState Get the value for property BallHandleState
            ballhandlestate = int8(obj.JavaMessage.getBallHandleState);
        end
        
        function set.BallHandleState(obj, ballhandlestate)
            %set.BallHandleState Set the value for property BallHandleState
            validateattributes(ballhandlestate, {'numeric'}, {'nonempty', 'scalar'}, 'JoystickCommand', 'BallHandleState');
            
            obj.JavaMessage.setBallHandleState(ballhandlestate);
        end
        
        function ptcontrollerstate = get.PtControllerState(obj)
            %get.PtControllerState Get the value for property PtControllerState
            ptcontrollerstate = int8(obj.JavaMessage.getPtControllerState);
        end
        
        function set.PtControllerState(obj, ptcontrollerstate)
            %set.PtControllerState Set the value for property PtControllerState
            validateattributes(ptcontrollerstate, {'numeric'}, {'nonempty', 'scalar'}, 'JoystickCommand', 'PtControllerState');
            
            obj.JavaMessage.setPtControllerState(ptcontrollerstate);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Motion = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Kick = obj.Kick;
            cpObj.RobotId = obj.RobotId;
            cpObj.KickPower = obj.KickPower;
            cpObj.ShovelIdx = obj.ShovelIdx;
            cpObj.BallHandleLeftMotor = obj.BallHandleLeftMotor;
            cpObj.BallHandleRightMotor = obj.BallHandleRightMotor;
            cpObj.BallHandleState = obj.BallHandleState;
            cpObj.PtControllerState = obj.PtControllerState;
            
            % Recursively copy compound properties
            cpObj.Motion = copy(obj.Motion);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Kick = strObj.Kick;
            obj.RobotId = strObj.RobotId;
            obj.KickPower = strObj.KickPower;
            obj.ShovelIdx = strObj.ShovelIdx;
            obj.BallHandleLeftMotor = strObj.BallHandleLeftMotor;
            obj.BallHandleRightMotor = strObj.BallHandleRightMotor;
            obj.BallHandleState = strObj.BallHandleState;
            obj.PtControllerState = strObj.PtControllerState;
            obj.Motion = feval([obj.MslMsgsMotionInfoClass '.loadobj'], strObj.Motion);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Kick = obj.Kick;
            strObj.RobotId = obj.RobotId;
            strObj.KickPower = obj.KickPower;
            strObj.ShovelIdx = obj.ShovelIdx;
            strObj.BallHandleLeftMotor = obj.BallHandleLeftMotor;
            strObj.BallHandleRightMotor = obj.BallHandleRightMotor;
            strObj.BallHandleState = obj.BallHandleState;
            strObj.PtControllerState = obj.PtControllerState;
            strObj.Motion = saveobj(obj.Motion);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.msl_msgs.JoystickCommand.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.msl_msgs.JoystickCommand;
            obj.reload(strObj);
        end
    end
end
