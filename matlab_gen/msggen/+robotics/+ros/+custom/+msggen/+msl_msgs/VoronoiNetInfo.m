classdef VoronoiNetInfo < robotics.ros.Message
    %VoronoiNetInfo MATLAB implementation of msl_msgs/VoronoiNetInfo
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'msl_msgs/VoronoiNetInfo' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '892ab28cbb1f3c12cfb1e538a554bb7c' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        MslMsgsPoint2dInfoClass = robotics.ros.msg.internal.MessageFactory.getClassForType('msl_msgs/Point2dInfo') % Dispatch to MATLAB class for message type msl_msgs/Point2dInfo
    end
    
    properties (Dependent)
        SenderId
        LinePoints
        Sites
    end
    
    properties (Access = protected)
        Cache = struct('LinePoints', [], 'Sites', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'LinePoints', 'SenderId', 'Sites'} % List of non-constant message properties
        ROSPropertyList = {'linePoints', 'senderId', 'sites'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = VoronoiNetInfo(msg)
            %VoronoiNetInfo Construct the message object VoronoiNetInfo
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function senderid = get.SenderId(obj)
            %get.SenderId Get the value for property SenderId
            senderid = int32(obj.JavaMessage.getSenderId);
        end
        
        function set.SenderId(obj, senderid)
            %set.SenderId Set the value for property SenderId
            validateattributes(senderid, {'numeric'}, {'nonempty', 'scalar'}, 'VoronoiNetInfo', 'SenderId');
            
            obj.JavaMessage.setSenderId(senderid);
        end
        
        function linepoints = get.LinePoints(obj)
            %get.LinePoints Get the value for property LinePoints
            if isempty(obj.Cache.LinePoints)
                javaArray = obj.JavaMessage.getLinePoints;
                array = obj.readJavaArray(javaArray, obj.MslMsgsPoint2dInfoClass);
                obj.Cache.LinePoints = feval(obj.MslMsgsPoint2dInfoClass, array);
            end
            linepoints = obj.Cache.LinePoints;
        end
        
        function set.LinePoints(obj, linepoints)
            %set.LinePoints Set the value for property LinePoints
            if ~isvector(linepoints) && isempty(linepoints)
                % Allow empty [] input
                linepoints = feval([obj.MslMsgsPoint2dInfoClass '.empty'], 0, 1);
            end
            
            validateattributes(linepoints, {obj.MslMsgsPoint2dInfoClass}, {'vector'}, 'VoronoiNetInfo', 'LinePoints');
            
            javaArray = obj.JavaMessage.getLinePoints;
            array = obj.writeJavaArray(linepoints, javaArray, obj.MslMsgsPoint2dInfoClass);
            obj.JavaMessage.setLinePoints(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.LinePoints)
                obj.Cache.LinePoints = [];
                obj.Cache.LinePoints = obj.LinePoints;
            end
        end
        
        function sites = get.Sites(obj)
            %get.Sites Get the value for property Sites
            if isempty(obj.Cache.Sites)
                javaArray = obj.JavaMessage.getSites;
                array = obj.readJavaArray(javaArray, obj.MslMsgsPoint2dInfoClass);
                obj.Cache.Sites = feval(obj.MslMsgsPoint2dInfoClass, array);
            end
            sites = obj.Cache.Sites;
        end
        
        function set.Sites(obj, sites)
            %set.Sites Set the value for property Sites
            if ~isvector(sites) && isempty(sites)
                % Allow empty [] input
                sites = feval([obj.MslMsgsPoint2dInfoClass '.empty'], 0, 1);
            end
            
            validateattributes(sites, {obj.MslMsgsPoint2dInfoClass}, {'vector'}, 'VoronoiNetInfo', 'Sites');
            
            javaArray = obj.JavaMessage.getSites;
            array = obj.writeJavaArray(sites, javaArray, obj.MslMsgsPoint2dInfoClass);
            obj.JavaMessage.setSites(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Sites)
                obj.Cache.Sites = [];
                obj.Cache.Sites = obj.Sites;
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.LinePoints = [];
            obj.Cache.Sites = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.SenderId = obj.SenderId;
            
            % Recursively copy compound properties
            cpObj.LinePoints = copy(obj.LinePoints);
            cpObj.Sites = copy(obj.Sites);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.SenderId = strObj.SenderId;
            LinePointsCell = arrayfun(@(x) feval([obj.MslMsgsPoint2dInfoClass '.loadobj'], x), strObj.LinePoints, 'UniformOutput', false);
            obj.LinePoints = vertcat(LinePointsCell{:});
            SitesCell = arrayfun(@(x) feval([obj.MslMsgsPoint2dInfoClass '.loadobj'], x), strObj.Sites, 'UniformOutput', false);
            obj.Sites = vertcat(SitesCell{:});
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.SenderId = obj.SenderId;
            strObj.LinePoints = arrayfun(@(x) saveobj(x), obj.LinePoints);
            strObj.Sites = arrayfun(@(x) saveobj(x), obj.Sites);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.msl_msgs.VoronoiNetInfo.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.msl_msgs.VoronoiNetInfo;
            obj.reload(strObj);
        end
    end
end
