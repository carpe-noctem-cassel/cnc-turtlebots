/*
 * rfidwriter.cpp
 *
 *  Created on: Dec 9, 2016
 *      Author: lab-user
 */
#include <stdio.h>
#include <phidget21.h>
#include <iostream>
#include <ostream>
#include <istream>
#include <limits>
#include <string.h>

using namespace std;

/* * rfidwriter.h
 *
 *  Created on: Dec 9, 2016
 *      Author: lab-user
 */

class rfid_writer {
public:
	//Declare an RFID handle
	CPhidgetRFIDHandle rfid;

	rfid_writer() {
		setup();
	}
	~rfid_writer() {
		teardown();
	}

	// - RFID simple -
	// This program simply displays the data that is generated by an RFID phidget in a very simple case and outputs it to the console.
	// This simple example covers the basics of connecting and using an RFID phidget.
	//
	// Copyright 2008 Phidgets Inc.  All rights reserved.
	// This work is licensed under the Creative Commons Attribution 2.5 Canada License.
	// view a copy of this license, visit http://creativecommons.org/licenses/by/2.5/ca/

	//Display the properties of the attached phidget to the screen.  We will be displaying the name, serial number and version of the attached device.
	//We will also display the number of available digital outputs
	int rfid_display_properties() {
		int serialNo, version, numOutputs, antennaOn, LEDOn;
		const char* ptr;

		CPhidget_getDeviceType((CPhidgetHandle) rfid, &ptr);
		CPhidget_getSerialNumber((CPhidgetHandle) rfid, &serialNo);
		CPhidget_getDeviceVersion((CPhidgetHandle) rfid, &version);

		CPhidgetRFID_getOutputCount(rfid, &numOutputs);
		CPhidgetRFID_getAntennaOn(rfid, &antennaOn);
		CPhidgetRFID_getLEDOn(rfid, &LEDOn);

		printf("%s\n", ptr);
		printf("Serial Number: %10d\nVersion: %8d\n", serialNo, version);
		printf("# Outputs: %d\n\n", numOutputs);
		printf("Antenna Status: %d\nOnboard LED Status: %d\n", antennaOn,
				LEDOn);

		return 0;
	}

	bool write() {
		string input_string;
		cout << "Tag string input: ";
		getline(cin, input_string);

		if (EPHIDGET_INVALIDARG
				== CPhidgetRFID_write(rfid, (char *) input_string.c_str(),
						PHIDGET_RFID_PROTOCOL_PHIDGETS, PFALSE)) {
			cout << "Write " << input_string;
			return true;
		} else {
			cout << "Error - not write " << input_string;
			return false;
		}
	}

	int read() {
		//read RFID event data
		cout << "Reading.....\n";

		//keep displaying RFID event data until user input is read
		printf("Press any key to exit\n");
		getchar();
		getchar();

		//all done, exit
		return 0;
	}

private:

	void setup() {
		//create the RFID object
		CPhidgetRFID_create(&rfid);

		//Set the handlers to be run when the device is plugged in or opened from software, unplugged or closed from software, or generates an error.
		CPhidget_set_OnAttach_Handler((CPhidgetHandle) rfid, AttachHandler,
		NULL);
		CPhidget_set_OnDetach_Handler((CPhidgetHandle) rfid, DetachHandler,
		NULL);
		CPhidget_set_OnError_Handler((CPhidgetHandle) rfid, ErrorHandler, NULL);

		//Registers a callback that will run if an output changes.
		//Requires the handle for the Phidget, the function that will be called, and an arbitrary pointer that will be supplied to the callback function (may be NULL).
		CPhidgetRFID_set_OnOutputChange_Handler(rfid, OutputChangeHandler,
		NULL);

		//Registers a callback that will run when a Tag is read.
		//Requires the handle for the PhidgetRFID, the function that will be called, and an arbitrary pointer that will be supplied to the callback function (may be NULL).
		CPhidgetRFID_set_OnTag2_Handler(rfid, TagHandler, NULL);

		//Registers a callback that will run when a Tag is lost (removed from antenna read range).
		//Requires the handle for the PhidgetRFID, the function that will be called, and an arbitrary pointer that will be supplied to the callback function (may be NULL).
		CPhidgetRFID_set_OnTagLost2_Handler(rfid, TagLostHandler, NULL);

		//open the RFID for device connections
		CPhidget_open((CPhidgetHandle) rfid, -1);

		//get the program to wait for an RFID device to be attached
		printf("Waiting for RFID to be attached....");

		int result;
		const char *err;
		if ((result = CPhidget_waitForAttachment((CPhidgetHandle) rfid, 10000))) {
			CPhidget_getErrorDescription(result, &err);
			printf("Problem waiting for attachment: %s\n", err);
			return;
		}

		// Enable radio antenna
		CPhidgetRFID_setAntennaOn(rfid, 1);
	}

	void teardown() {
		//since user input has been read, this is a signal to terminate the program so we will close the phidget and delete the object we created
		printf("Closing...\n");
		CPhidget_close((CPhidgetHandle) rfid);
		CPhidget_delete((CPhidgetHandle) rfid);
	}

	static int CCONV AttachHandler(CPhidgetHandle RFID, void *userptr) {
		int serialNo;
		const char *name;

		CPhidget_getDeviceName(RFID, &name);
		CPhidget_getSerialNumber(RFID, &serialNo);
		printf("%s %10d attached!\n", name, serialNo);

		return 0;
	}

	static int CCONV DetachHandler(CPhidgetHandle RFID, void *userptr) {
		int serialNo;
		const char *name;

		CPhidget_getDeviceName(RFID, &name);
		CPhidget_getSerialNumber(RFID, &serialNo);
		printf("%s %10d detached!\n", name, serialNo);

		return 0;
	}

	static int CCONV ErrorHandler(CPhidgetHandle RFID, void *userptr,
			int ErrorCode, const char *unknown) {
		printf("Error handled. %d - %s\n", ErrorCode, unknown);
		return 0;
	}

	static int CCONV OutputChangeHandler(CPhidgetRFIDHandle RFID, void *usrptr,
			int Index, int State) {
		if (Index == 0 || Index == 1) {
			printf("Output: %d > State: %d\n", Index, State);
		}
		return 0;
	}

	static int CCONV TagHandler(CPhidgetRFIDHandle RFID, void *usrptr,
			char *TagVal, CPhidgetRFID_Protocol proto) {
		//turn on the Onboard LED
		CPhidgetRFID_setLEDOn(RFID, 1);

		printf("Tag Read: %s\n", TagVal);
		return 0;
	}

	static int CCONV TagLostHandler(CPhidgetRFIDHandle RFID, void *usrptr,
			char *TagVal, CPhidgetRFID_Protocol proto) {
		//turn off the Onboard LED
		CPhidgetRFID_setLEDOn(RFID, 0);

		printf("Tag Lost: %s\n", TagVal);
		return 0;
	}

};

int main(int argc, char* argv[]) {
	rfid_writer *rfidWriter = new rfid_writer();
	string input;
	while (true) {
		printf(
				"Bitte wÃ¤hlen sie einen Modi:\n[a] Lese RFID-Tag\n[b] Schreibe RFID-Tag\n[c] Gebe Informationen aus\nEingabe: ");
		cin >> input;

		if (input == "a") {
			rfidWriter->read();
		} else if (input == "b") {
			rfidWriter->write();
		} else if (input == "c") {
			rfidWriter->rfid_display_properties();
		} else if (input == "e") {
			printf("Program quit");
			break;
		}
	};
	delete rfidWriter;
	return 0;
}
